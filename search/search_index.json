{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Onblick Automation Reference Guide","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Welcome to the Selenium C# Automation Project for OnBlick 2.0. This project aims to automate various web application functionalities using Selenium WebDriver with C#. The goal is to ensure robust and efficient automated testing to improve the quality and reliability of the OnBlick 2.0 application.</p>"},{"location":"#project-overview","title":"Project Overview","text":"<p>This project focuses on creating a suite of automated tests to cover key functionalities of the web application. The project uses the Page Object Model (POM) design pattern to enhance code maintainability and readability.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Automated test cases for user login, navigation, and core functionalities.</li> <li>Structured using the Page Object Model for better organization and maintenance.</li> <li>Integration with continuous integration tools for automated test execution.</li> <li>Detailed test reports and logs for better visibility and analysis.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with this project, ensure you have all the Prerequisites first and then follow the setup guide for instructions on configuring your environment and running the automated tests.</p>"},{"location":"attribute-extensions/","title":"AttributeExtensions","text":"<p><code>AttributeExtensions</code> is a library that provides a set of extension methods for working with NUnit attributes.</p>"},{"location":"attribute-extensions/#members","title":"Members","text":""},{"location":"attribute-extensions/#customretryattribute","title":"CustomRetryAttribute","text":"<p><code>CustomRetryAttribute</code> is an attribute that can be used to specify the number of times a test should be retried if it fails with a particular exception which contains <code>\"The HTTP request to the remote WebDriver server for URL\"</code> in the message.</p>"},{"location":"attribute-extensions/#constructor","title":"Constructor","text":"CustomRetryAttributeParameters <pre><code>public CustomRetryAttribute(int tryCount)\n</code></pre> Name Type Description <code>tryCount</code> <code>int</code> The number of times the test should be retried including the initial run."},{"location":"attribute-extensions/#methods","title":"Methods","text":""},{"location":"attribute-extensions/#wrap","title":"Wrap","text":"<p>Wraps a test method command and returns the result.</p> WrapParameters <pre><code>public TestCommand Wrap(TestCommand command)\n{\n    return new RetryCommand(command, _tryCount);\n}\n</code></pre> Name Type Description <code>command</code> <code>TestCommand</code> The inner command to be executed."},{"location":"attribute-extensions/#nested-class-retry-command","title":"Nested Class: Retry Command","text":"<p>The <code>RetryCommand</code> class implements the logic for retrying a test method.</p>"},{"location":"attribute-extensions/#constructor_1","title":"Constructor","text":"RetryCommandParameters <pre><code>public RetryCommand(TestCommand innerCommand, int tryCount)\n</code></pre> Name Type Description <code>innerCommand</code> <code>TestCommand</code> The inner command to be executed. <code>tryCount</code> <code>int</code> The number of times the test should be retried including the initial run."},{"location":"attribute-extensions/#execute-method","title":"Execute Method","text":"<p>Description: Runs the test, saving a <code>TestResult</code> in the supplied <code>TestExecutionContext</code>. In case of retries, it will re-run the test after clearing drivers and reports.</p> ExecuteParametersReturns <pre><code>public override TestResult Execute(TestExecutionContext context)\n</code></pre> Name Type Description <code>context</code> <code>TestExecutionContext</code> The current <code>TestExecutionContext</code>. <p><code>TestResult</code> - The result of the test execution.</p>"},{"location":"attribute-extensions/#usage","title":"Usage","text":"Example 1Example 2 <pre><code>[Test]\n[CustomRetry(3)]\npublic void TestMethod()\n{\n    // Test code\n}\n</code></pre> <pre><code>[Test, CustomRetry(3)]\npublic void TestMethod()\n{\n    // Test code\n}\n</code></pre> <p>Note: Both examples apply the <code>Test</code> and <code>CustomRetry(3)</code> attributes to the <code>TestMethod</code>. The choice between the two styles is mostly a matter of personal preference or coding style guidelines</p>"},{"location":"attribute-extensions/#ignoreassertionfailuresattribute","title":"IgnoreAssertionFailuresAttribute","text":"<p>The <code>IgnoreAssertionFailuresAttribute</code> class is used to specify that a test should be marked as passed if it failed only due to soft assertion failures.</p>"},{"location":"attribute-extensions/#methods_1","title":"Methods","text":""},{"location":"attribute-extensions/#wrap_1","title":"Wrap","text":"<p>Wraps a test method command and returns the result.</p> WrapParameters <pre><code>public TestCommand Wrap(TestCommand command)\n{\n    return new IgnoreAssertionFailuresCommand(command);)\n}\n</code></pre> Name Type Description <code>command</code> <code>TestCommand</code> The inner command to be executed."},{"location":"attribute-extensions/#nested-class-ignore-assertion-failures-command","title":"Nested Class: Ignore Assertion Failures Command","text":"<p>The <code>IgnoreAssertionFailuresCommand</code> class implements the logic for ignoring assertion failures.</p>"},{"location":"attribute-extensions/#constructor_2","title":"Constructor","text":"IgnoreAssertionFailuresCommandParameters <pre><code>public IgnoreAssertionFailuresCommand(TestCommand innerCommand)\n</code></pre> Name Type Description <code>innerCommand</code> <code>TestCommand</code> The inner command to be executed."},{"location":"attribute-extensions/#execute-method_1","title":"Execute Method","text":"<p>Description: Runs the test, saving a <code>TestResult</code> in the supplied <code>TestExecutionContext</code>. In case of test failure only due to assertion failures, it will mark the test as passed.</p> ExecuteParametersReturns <pre><code>public override TestResult Execute(TestExecutionContext context)\n</code></pre> Name Type Description <code>context</code> <code>TestExecutionContext</code> The current <code>TestExecutionContext</code>. <p><code>TestResult</code> - The result of the test execution.</p>"},{"location":"attribute-extensions/#usage_1","title":"Usage","text":"Example 1Example 2 <pre><code>[Test]\n[IgnoreAssertionFailures]\npublic void TestMethod()\n{\n    // Test code\n}\n</code></pre> <pre><code>[Test, IgnoreAssertionFailures]\npublic void TestMethod()\n{\n    // Test code\n}\n</code></pre> <p>Note: Both examples apply the <code>Test</code> and <code>IgnoreAssertionFailures</code> attributes to the <code>TestMethod</code>. The choice between the two styles is mostly a matter of personal preference or coding style guidelines</p>"},{"location":"best-practices/","title":"Best Practices","text":"<ul> <li>Use meaningful and descriptive names: Name your variables, functions, and classes descriptively to clearly convey their purpose, e.g., <code>LoginPage</code>, <code>SubmitButton</code>, <code>EnterCredentials</code>.</li> <li>Follow the SOLID principles: Apply SOLID principles to design clean, maintainable, and scalable automation frameworks.</li> <li>Proper exception handling: Implement robust exception handling to manage errors and failures gracefully. Use try-catch blocks and custom exceptions where appropriate.</li> <li>Version control: Use Git or other version control systems to track changes, manage different versions of your test scripts, and collaborate effectively with team members.</li> <li>Write XML documentation: Document your code using XML comments to provide context, usage instructions, and details about classes, methods, and parameters.</li> <li>Modular and organized code: Keep your test code modular by organizing it into namespaces and folders based on functionality (e.g., <code>Pages</code>, <code>Tests</code>, <code>Utilities</code>).</li> <li>Comment your code: Use comments to explain the purpose, logic, and functionality of your code, especially complex test scenarios or custom utilities.</li> <li>Optimize for performance: Write efficient test scripts by avoiding unnecessary loops, redundant actions, and using appropriate synchronization methods like explicit waits.</li> <li>Coding conventions and style guidelines: Adhere to C# coding standards and your project's specific style guidelines to ensure consistency and readability across the codebase.</li> <li>Regularly refactor your code: Continuously improve the readability, efficiency, and maintainability of your test scripts by refactoring and cleaning up code.</li> <li>Logging and reporting: Implement logging to capture detailed information about test execution and issues. Use reporting tools to generate clear and informative test reports.</li> <li>Continuous learning: Stay updated with the latest trends, tools, and best practices in Selenium, C#, and automation testing. Regularly participate in training and community forums.</li> <li>Use Page Object Model (POM): Structure your automation code using the Page Object Model to enhance maintainability and reusability by separating page-specific logic from test scripts.</li> <li>Avoid using deprecated features: Refrain from using outdated features like PageFactory, and adopt newer, more reliable alternatives to ensure compatibility and stability in your automation framework.</li> </ul>"},{"location":"browser-options/","title":"BrowserOptions","text":""},{"location":"browser-options/#defaultchromeoptions","title":"DefaultChromeOptions","text":"<p>The <code>DefaultChromeOptions</code> class extends <code>ChromeOptions</code> to provide a default configuration for Chrome WebDriver instances.</p>"},{"location":"browser-options/#configuration-details","title":"Configuration Details","text":"<ol> <li>Download Directory:<ul> <li>Path: <code>..\\..\\..\\Downloads</code> (relative to the current execution directory).</li> <li>Ensures the directory is created if it does not exist.</li> </ul> </li> <li>Logging Preferences:<ul> <li>Browser logs: Set to <code>LogLevel.Severe</code>.</li> <li>Performance logs: Set to <code>LogLevel.All</code>.</li> </ul> </li> <li>Chrome Arguments:<ul> <li><code>--disable-extensions</code>: Disables any extensions.</li> <li><code>--disable-popup-blocking</code>: Disables popup blocking.</li> <li><code>--start-maximized</code>: Maximizes the browser window.</li> <li><code>--foreground-flash-enabled</code>: Brings the window to the foreground.</li> <li><code>--window-size=1920x1080</code>: Sets the screen resolution to 1920x1080 for functional tests.</li> <li><code>--headless</code>: (Commented out) Executes tests in headless mode.</li> </ul> </li> </ol> <p>Note: Only Chrome Browser is used for automation as of now. More browsers shall be used in the future for cross-browser testing.</p>"},{"location":"build/","title":"Building the Solution","text":"<p>Building the solution is an essential step to ensure that all dependencies are correctly installed and the project is ready for execution. Follow the steps below to build the solution for your Selenium C# automation project.</p>"},{"location":"build/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"build/#open-the-solution-in-visual-studio","title":"Open the Solution in Visual Studio","text":"<ul> <li>Open Visual Studio 2022.</li> <li>Navigate to the project directory and open the solution file (<code>.sln</code>).</li> </ul>"},{"location":"build/#restore-nuget-packages","title":"Restore NuGet Packages","text":"<p>To restore the necessary NuGet packages:</p> <ul> <li>In Visual Studio, go to <code>Tools</code> &gt; <code>NuGet Package Manager</code> &gt; <code>Package Manager Console</code>.</li> <li>Run the following command:     <pre><code>dotnet restore\n</code></pre></li> <li>This command will install and restore all the NuGet packages required for the project.</li> <li>You can also right-click on the solution in the Solution Explorer and select <code>Restore NuGet Packages</code>.</li> </ul>"},{"location":"build/#build-the-solution","title":"Build the Solution","text":"<p>To build the solution:</p> <ul> <li>Click on <code>Build</code> in the Visual Studio menu.</li> <li>Select <code>Build Solution</code> from the dropdown menu.</li> <li>Alternatively, you can use the shortcut <code>Ctrl + Shift + B</code> to build the solution or use the <code>dotnet build</code> command in the terminal.</li> <li>Visual Studio will compile the project and display any build errors or warnings in the <code>Error List</code> window.</li> <li>Ensure that the build is successful without any errors.</li> </ul>"},{"location":"build/#verify-the-build-output","title":"Verify the Build Output","text":"<p>After building the solution, verify the build output:</p> <ul> <li>Check the <code>Output</code> window in Visual Studio for the build output.</li> <li>Ensure that the build succeeded and there are no errors or warnings.</li> <li>The build output will show the build time, number of errors, warnings, and other relevant information.</li> <li>If there are any errors, review the error messages and resolve them before proceeding.</li> <li>If the build is successful, the project is ready for execution.</li> </ul>"},{"location":"build/#conclusion","title":"Conclusion","text":"<p>Building the solution ensures that all dependencies are correctly installed, and the project is compiled without any errors. This step is crucial before running your Selenium C# automation tests to ensure that the project is in a stable state and ready for execution.</p> <p>Note: If you're ever pushing your code to remote, make sure there are no errors by building the solution first.</p>"},{"location":"ci/","title":"Continuous Integration","text":""},{"location":"ci/#pipelines","title":"Pipelines","text":"<ol> <li>This project uses Azure Devops Pipelines for Continuous Integration.</li> <li>There are multiple pipelines that are used to test in different environments whenever there are new releases. </li> <li>The pipelines are triggered based on <code>testCategory</code> - which are assigned to each test. <ul> <li>The test categories are <code>Smoke</code>, <code>Sanity</code>, <code>Regression</code>, <code>Timesheets</code>, <code>NewFormI9</code> and so on and so forth. </li> <li>The pipelines are triggered based on the test category and the test environment (<code>demo</code>, <code>prod</code>, <code>dev</code> etc.,).</li> </ul> </li> <li>The pipelines are also named based on the test category and the test environment.<ul> <li>For example, <code>Demo-Smoke</code>, <code>Demo-Sanity</code>, <code>Prod-Sanity</code> etc.,</li> </ul> </li> <li>Both <code>Demo-Smoke</code> and <code>Demo-Sanity</code> are scheduled to run Mon-Fri at <code>7:45 AM IST</code> and <code>8:30 AM IST</code> respectively.</li> <li>All the other pipelines can only be triggered manually.</li> </ol>"},{"location":"ci/#stages","title":"Stages","text":"<ol> <li>The pipelines have multiple stages - but all stages are simliar/same between different pipelines.</li> <li>The stages are:<ul> <li><code>Initialize Job</code>: This stage initializes the job, install any tasks that are required and sets the variables required for the pipeline.</li> <li><code>Checkout</code>: This stage checks out the code from the repository.</li> <li><code>Initialize Report Folderpath</code>: This stage creates the folder structure for the test reports.</li> <li><code>Set Screen Resolution</code>: This stage sets the screen resolution for the tests.</li> <li><code>Install Dependencies</code>: This stage installs the dependencies (Restore NuGet Packages using <code>dotnet restore</code>) required for the tests.</li> <li><code>Build Solution</code>: This stage builds the solution using <code>dotnet build</code>.</li> <li><code>Run Tests</code>: This stage runs the tests using <code>dotnet test</code> and publishes the test run.</li> <li><code>Publish Extent Reports</code>: This stage publishes the test reports as artifacts.</li> <li><code>Cleanup Reports folder</code>: This stage cleans up the reports folder.</li> <li><code>Finalize Job</code>: This stage finalizes the job and cleans up any resources that are used.</li> <li><code>Report build status</code>: This stage sets the build status for the current commit.</li> </ul> </li> <li>The stages are executed in the order mentioned above.</li> <li>The stages are executed in the same order for all the pipelines.</li> </ol>"},{"location":"ci/#test-results","title":"Test Results","text":"<ol> <li>The test results are published to Azure Devops Pipelines.</li> <li>The test results are published in the form of <code>Test Run</code> and <code>Test Result</code> in the Azure Devops Pipelines.</li> <li>Here's what a test result would look like -      </li> </ol>"},{"location":"ci/#test-reports","title":"Test Reports","text":"<ol> <li>The test reports are published as Artifacts to Azure Devops Pipelines.</li> <li>The test reports are published in the form of <code>HTML</code> files in the <code>ExtentReports</code> directory of the published artifacts for the build pipeline</li> <li>To see an example of <code>Test Reports</code> go to Example Report in the Reports Section.</li> </ol>"},{"location":"ci/#test-logs","title":"Test Logs","text":"<ol> <li>You can view the test logs in the <code>Run Tests</code> task of the pipeline.</li> <li>The logs are grouped by tests and also colored based on the test pass or fail status.</li> <li>The logs also contain each test step from <code>ExecuteStep</code> whenever the current step has started and finished.</li> <li>All these logs are colored and grouped based on their status and tests so they are easy to read and understand.</li> <li>Here's what the logs would look like -      </li> </ol>"},{"location":"ci/#email-notifications","title":"Email Notifications","text":"<ol> <li>The pipelines are configured to send email notifications to the team whenever the pipeline finishes running.</li> <li>The email notifications are sent to the team members who are part of the teams - <code>automationteam@onblick.com</code> and <code>qateam@onblick.com</code>.</li> <li>The email notifications contain the test result and a link to the test run where you can also download the test report.</li> </ol>"},{"location":"debugging/","title":"Debugging","text":"<p>Debugging is an essential part of software development, especially when working with Selenium tests in C# automation. Below are steps and tips to effectively debug your Selenium tests.</p>"},{"location":"debugging/#setting-up-the-debugger","title":"Setting Up the Debugger","text":"<ol> <li>Open Your Test File: Navigate to the test file or test method you wish to debug.</li> <li>Right-Click to Select Debug Option: Right-click on the test file or method and select <code>Debug Tests</code> from the context menu. This will start the test runner in debug mode.</li> <li>Set Breakpoints: Click in the gutter (left margin) next to the line numbers in your code to set breakpoints. The debugger will pause execution at these points, allowing you to inspect variables and the flow of execution.</li> </ol>"},{"location":"debugging/#using-breakpoints","title":"Using Breakpoints","text":"<p>Breakpoints are markers that tell the debugger to pause execution at a specific line of code. This allows you to examine the state of the program at that point.</p> <ol> <li>Add Breakpoints: Click on the left margin next to the line number where you want to pause execution.</li> <li>Run the Debugger: Start the debugger by selecting <code>Debug Tests</code>.</li> <li>Inspect Variables: Hover over variables to see their current values, or use the <code>Variables</code> pane to inspect and modify their values.</li> <li>Step Through Code:<ul> <li>Step Over (F10): Execute the next line of code, but do not step into function calls.</li> <li>Step Into (F11): Step into the next function call.</li> <li>Step Out (Shift + F11): Step out of the current function and return to the caller.</li> <li>Continue (F5): Resume execution until the next breakpoint is hit.</li> </ul> </li> </ol>"},{"location":"debugging/#inspecting-variables","title":"Inspecting Variables","text":"<p>When execution is paused at a breakpoint, you can inspect the current state of your program:</p> <ul> <li>Locals Window: Displays variables that are in the current scope.</li> <li>Watch Window: Allows you to specify variables you want to keep an eye on.</li> <li>Immediate Window: You can evaluate expressions and execute code snippets to see their results.</li> </ul>"},{"location":"debugging/#debugging-tests","title":"Debugging Tests","text":"<ol> <li>Initialize WebDriver in Debug Mode: Ensure your WebDriver is correctly initialized and running. Verify browser instances are launched as expected.</li> <li>Check Element Locators: Use the debugger to verify that element locators (<code>IDs</code>, <code>XPaths</code>, <code>CSS Selectors</code>) are correct and elements are being found.</li> <li>Waits and Timeouts: Debug any issues related to waits and timeouts (e.g., <code>WebDriverWait</code>, <code>ImplicitWait</code>). Ensure that elements have enough time to load and interact.</li> <li>Screenshots: Capture screenshots at different points to visualize what the browser is displaying. Use (<code>(ITakesScreenshot)driver).GetScreenshot().SaveAsFile(...)</code> to save screenshots.</li> <li>JavaScript Execution: Debug JavaScript execution within your Selenium tests to ensure scripts are running as expected using <code>((IJavaScriptExecutor)driver).ExecuteScript(...)</code>.</li> </ol>"},{"location":"debugging/#common-debugging-techniques","title":"Common Debugging Techniques","text":"<ol> <li>Print Statements: Add <code>Console.WriteLine</code> statements in your code to output variable values and checkpoints. While not as powerful as a debugger, this can be a quick way to understand code flow.</li> <li>Conditional Breakpoints: Set conditions for breakpoints so they only pause execution when certain criteria are met.</li> <li>Exception Breakpoints: Configure the debugger to break when exceptions are thrown, allowing you to examine the state of the program at the point of failure.</li> <li>Log Files: Use logging to record the execution flow and variable states to a file, which can be reviewed after test runs.</li> </ol>"},{"location":"debugging/#advanced-debugging-features","title":"Advanced Debugging Features","text":"<ul> <li>Remote Debugging: Attach the debugger to a process running on a remote machine.</li> <li>Debugging External Code: Enable debugging of external libraries and framework code to understand issues that arise outside of your own codebase.</li> <li>Snapshot Debugging: Take a snapshot of your application's state at a specific point in time for later inspection.</li> </ul>"},{"location":"debugging/#debugging-best-practices","title":"Debugging Best Practices","text":"<ol> <li>Isolate Issues: Focus on one problem at a time. Trying to debug multiple issues simultaneously can be confusing and inefficient.</li> <li>Reproduce the Problem: Ensure that you can consistently reproduce the problem. Intermittent issues can be much harder to diagnose.</li> <li>Understand the Code: Take the time to understand the code you're debugging. Knowing the expected behavior helps in identifying what went wrong.</li> <li>Use Version Control: Keep your code under version control so you can easily revert to a known good state if needed.</li> <li>Document Bugs: Document any bugs you find, along with the steps to reproduce them and the solutions you implemented. This can be helpful for future reference.</li> </ol>"},{"location":"extent-manager/","title":"ExtentManager","text":"<p>The <code>ExtentManager</code> class is responsible for managing the creation and configuration of the Extent Reports instance used for generating test reports. It ensures that the reporting setup is initialized only once and provides access to the configured <code>ExtentReports</code> instance.</p>"},{"location":"extent-manager/#class-definition","title":"Class Definition","text":"<pre><code>public class ExtentManager\n</code></pre>"},{"location":"extent-manager/#properties","title":"Properties","text":"<ul> <li>ExtentReports extent: Static instance of <code>ExtentReports</code> used to generate and manage reports.</li> </ul>"},{"location":"extent-manager/#methods","title":"Methods","text":"GetInstanceDescriptionReturnsDetailsUsage Example <pre><code>public static ExtentReports GetInstance()\n</code></pre> <p>This method creates and returns a singleton instance of <code>ExtentReports</code>. If an instance of <code>ExtentReports</code> does not already exist, it initializes one and configures it with an <code>ExtentV3HtmlReporter</code>.</p> <ul> <li>The configured <code>ExtentReports</code> instance.</li> </ul> <ol> <li>HTML Reporter Configuration:<ul> <li>Theme: Dark</li> <li>Timeline: Disabled</li> </ul> </li> <li>Report Path: Retrieved using <code>ReportsGenerationClass.GetReportPath()</code>.</li> </ol> <pre><code>ExtentReports extent = ExtentManager.GetInstance();\n</code></pre>"},{"location":"extent-manager/#notes","title":"Notes","text":"<ul> <li>The singleton pattern is used to ensure that only one instance of ExtentReports is created and used throughout the test execution.</li> <li>The HTML reporter settings are configured to use a dark theme and disable the timeline feature.</li> </ul>"},{"location":"first-test/","title":"Writing Your First Test","text":""},{"location":"first-test/#first-test","title":"First Test","text":"<p>Now that we have our project set up, let's write our first test. We'll write a test that verifies that the Login function <code>LoginPage.ValidLogin()</code> works correctly. We'll write this test in a new file called <code>LoginTest.cs</code> in the <code>Test Plans</code> directory.</p> <pre><code>using NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\nusing System;\n\nnamespace Test\n{\n    public class LoginTest\n    {\n        IWebDriver driver;\n\n        [SetUp]\n        public void Setup()\n        {\n            driver = new ChromeDriver();\n            driver.Manage().Window.Maximize();\n        }\n\n        [Test]\n        public void ValidLogin()\n        {\n            LoginPage loginPage = new LoginPage(driver);\n            loginPage.ValidLogin(LoginCreds.Instance.HR_Email,LoginCreds.Instance.HR_Pwd);\n            Assert.IsTrue(driver.Url.Contains(\"dashboard\"));\n        }\n\n        [TearDown]\n        public void TearDown()\n        {\n            driver.Quit();\n        }\n    }\n}\n</code></pre> <p>This <code>ValidLogin()</code> method is already defined in the <code>LoginPage</code> class. We're using the <code>Assert.IsTrue()</code> method to verify that the URL contains the string \"dashboard\" after a successful login. If the URL contains \"dashboard\", the test passes. If it doesn't, the test fails. And the <code>LoginCreds</code> class is also already defined in <code>TestData\\LoginCredentials</code> folder. This class is used to store the login credentials for the test which are retrieved from <code>creds.json</code>.</p> <p>The pseudo-code in <code>ValidLogin()</code> method is as follows:</p> Pseudo Code <pre><code>Navigate to the login page\nEnter the email and password\nClick the login button\n</code></pre>"},{"location":"first-test/#real-time-example-for-new-test","title":"Real-time Example for New Test","text":"<ul> <li>First, create a new file in each Test Plans, Test Data, Page Object folders respectively</li> <li>Create a new test in the Test Plans folder corresponding to your current Test, let's name it <code>MyFirstTest.cs</code>.</li> <li>Create a new page object in the Page Object folder, let's name it <code>MyFirstPage.cs</code>. This file will contain all the locators and methods necessary to interact with the current page.<ul> <li>In case the number of methods is vast, you can separate the methods into a different file and create it in the <code>WebInteractions</code> folder. Let's name it <code>MyFirstInteractions.cs</code>.</li> <li>In our project, the private By locator in the PageObject and the method that's used to access to the locator are written in the same line so as to be able to sort the locators easily.</li> </ul> </li> <li>Create a new test data file in the Test Data folder, let's name it <code>MyFirstData.cs</code>. This file will contain all the data necessary for the test.</li> </ul>"},{"location":"first-test/#sample-code","title":"Sample Code","text":"MyFirstTest.csMyFirstPage.csMyFirstInteractions.csMyFirstData.cs <pre><code>using NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\nusing System;\n\nnamespace Test\n{\n    public class MyFirstTest\n    {\n        IWebDriver driver;\n\n        [SetUp]\n        public void Setup()\n        {\n            driver = new ChromeDriver();\n            driver.Manage().Window.Maximize();\n        }\n\n        [Test]\n        public void MyFirstTest()\n        {\n            MyFirstPage myFirstPage = new MyFirstPage(driver);\n            MyFirstInteractions myFirstInteractions = new MyFirstInteractions(driver);\n\n            myFirstInteractions.MyFirstMethod(MyFirstData.Username, MyFirstData.Password);\n            Assert.IsTrue(driver.Url.Contains(\"dashboard\"));\n        }\n\n        [TearDown]\n        public void TearDown()\n        {\n            driver.Quit();\n        }\n    }\n}\n</code></pre> <pre><code>using OpenQA.Selenium;\nusing System;\n\nnamespace PageObjects\n{\n    public class MyFirstPage\n    {\n        IWebDriver driver;\n\n        //Locators for your elements go here\n        private By MyLocator = By.Id(\"myElement\"); \n        public By MyLocatorId() { return MyLocator; }\n\n        public MyFirstPage(IWebDriver driver)\n        {\n            this.driver = driver;\n        }\n\n        //if you do use PageFactory, use the elements from PageFactory here\n        [FindsBy(How = How.Id, Using = \"myElement\")]\n        public IWebElement MyElement\n    }\n}\n</code></pre> <pre><code>using OpenQA.Selenium;\nusing System;\n\nnamespace WebInteractions\n{\n    public class MyFirstInteractions\n    {\n        IWebDriver driver;\n\n        public MyFirstInteractions(IWebDriver driver)\n        {\n            this.driver = driver;\n        }\n\n        public void MyFirstMethod(string data)\n        {\n            // Write your code here\n        }\n    }\n}\n</code></pre> <pre><code>using System;\n\nnamespace TestData\n{\n    public class MyFirstData\n    {\n        //Test Data that you'll use in your Tests\n\n        public static readonly string Username = \"myUsername\";\n        public static readonly string Password = \"myPassword\";\n    }\n}\n</code></pre>"},{"location":"first-test/#build-and-resolve-any-errors","title":"Build and Resolve any errors","text":"<p>After writing your test, <code>build the solution</code> to ensure that there are no errors. If there are any errors, review the error messages and resolve them before proceeding. Once the build is successful, the project is ready for execution.</p>"},{"location":"git/","title":"Using Git","text":""},{"location":"git/#what-is-git","title":"What is Git?","text":"<p>Git is a version control system that allows you to track changes in your code. It is a distributed version control system, which means that you can work on your code locally and then push your changes to a remote repository. This is useful for collaboration, as multiple people can work on the same codebase without interfering with each other's work.</p>"},{"location":"git/#why-use-git","title":"Why use Git?","text":"<ul> <li>Keep track of changes in your code.</li> <li>Collaborate with others.</li> <li>Easily revert to previous versions of your code.</li> <li>Keep your code safe and secure.</li> </ul>"},{"location":"git/#how-to-use-git","title":"How to use Git","text":""},{"location":"git/#installing-git","title":"Installing Git","text":"<p>To install Git, go to the Git website and download the appropriate version for your operating system. Follow the installation instructions to install Git on your machine.</p>"},{"location":"git/#setting-up-git","title":"Setting up Git","text":"<p>Once Git is installed, you need to configure it with your name and email address. Open a terminal window and run the following commands:</p> Configuration Commands <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"Your Email\"\n</code></pre>"},{"location":"git/#integrated-git-support-for-visual-studio-2022","title":"Integrated Git Support for Visual Studio 2022","text":"<p>Visual Studio 2022 has built-in support for Git, which makes it easy to manage your code using Git. To enable Git support in Visual Studio 2022, follow these steps:</p> <ol> <li>Open Visual Studio 2022.</li> <li>Open <code>Git</code>.</li> <li>Open <code>Settings</code>.</li> <li>Here you can configure your Git settings, such as your name and email address as we did in the previous step.</li> <li>You can also configure other settings, such as default location and manage remote branches etc.,</li> <li>You will have access to almost all git commands in the Visual Studio 2022 UI but you can also use the terminal to run git commands.</li> </ol>"},{"location":"git/#git-commands","title":"Git Commands","text":"<p>Here are some common Git commands that you will use when working with Git:</p> Git CommandsUsage <pre><code>git init\ngit add .\ngit commit -m \"Commit message\"\ngit status\ngit log\ngit push\ngit pull\ngit clone\n</code></pre> <ol> <li><code>git init</code>: Initializes a new Git repository in the current directory.</li> <li><code>git add .</code>: Adds all files in the current directory to the staging area.</li> <li><code>git commit -m \"Commit message\"</code>: Commits the changes in the staging area with the specified commit message.</li> <li><code>git status</code>: Shows the status of the current repository, including which files are staged, modified, or untracked.</li> <li><code>git log</code>: Shows the commit history of the repository.</li> <li><code>git push</code>: Pushes the changes in the local repository to the remote repository.</li> <li><code>git pull</code>: Pulls the changes from the remote repository to the local repository.</li> <li><code>git clone</code>: Clones a remote repository to the local machine.</li> </ol>"},{"location":"git/#git-workflow","title":"Git Workflow","text":"<p>Here is a typical Git workflow diagram. </p>"},{"location":"git/#diagram-representation","title":"Diagram Representation","text":""},{"location":"git/#local-repository","title":"Local Repository","text":""},{"location":"git/#working-tree","title":"Working Tree","text":"<ul> <li>Description: This is your local working directory where you make changes to your files.</li> <li>Commands:<ul> <li><code>git add</code>: Moves changes from the working tree to the staging area.</li> </ul> </li> </ul>"},{"location":"git/#indexstaging-area","title":"Index/Staging Area","text":"<ul> <li>Description: The staging area holds changes that are ready to be committed.</li> <li>Commands:<ul> <li><code>git commit</code>: Records changes from the staging area to the local branch.</li> </ul> </li> </ul>"},{"location":"git/#local-branch","title":"Local Branch","text":"<ul> <li>Description: This is your local branch where commits are recorded.</li> <li>Commands:<ul> <li><code>git push</code>: Sends committed changes from the local branch to the remote repository.</li> <li><code>git checkout</code>: Switches between branches in your local repository.</li> <li><code>git merge/rebase</code>: Integrates changes from one branch into another.</li> </ul> </li> </ul>"},{"location":"git/#remote-repository","title":"Remote Repository","text":""},{"location":"git/#remote-tracking-ref","title":"Remote-Tracking Ref","text":"<ul> <li>Description: This is a reference to the state of branches in the remote repository.</li> <li>Commands:<ul> <li><code>git fetch</code>: Retrieves updates from the remote repository without integrating them.</li> <li><code>git pull</code>: Fetches updates from the remote repository and merges them into the local branch.</li> </ul> </li> </ul>"},{"location":"git/#remote-branch","title":"Remote Branch","text":"<ul> <li>Description: The branch in the remote repository (e.g., <code>origin/master</code>).</li> </ul>"},{"location":"git/#commands-summary","title":"Commands Summary","text":"<ul> <li><code>git add</code>: Adds changes to the staging area.</li> <li><code>git commit</code>: Commits changes to the local branch.</li> <li><code>git push</code>: Pushes changes to the remote repository.</li> <li><code>git fetch</code>: Fetches updates from the remote repository.</li> <li><code>git pull</code>: Fetches and merges changes from the remote repository.</li> <li><code>git checkout</code>: Switches branches.</li> <li><code>git merge/rebase</code>: Merges or rebases branches.</li> </ul>"},{"location":"git/#workflow-steps","title":"Workflow Steps","text":"<ol> <li>Make changes in your working tree.</li> <li>Stage changes using <code>git add</code>.</li> <li>Commit changes to your local branch with <code>git commit</code>.</li> <li>Push changes to the remote repository using <code>git push</code>.</li> <li>Fetch updates from the remote repository using <code>git fetch</code>.</li> <li>Pull updates and merge them into your local branch with <code>git pull</code>.</li> <li>Switch branches using <code>git checkout</code> as needed.</li> <li>Merge or rebase branches using <code>git merge/rebase</code>.</li> </ol>"},{"location":"login-creds/","title":"LoginCreds","text":"<p>The <code>LoginCreds</code> class is a singleton utility designed to manage and provide access to login credentials for HR Managers or Employers in various environments. The credentials are stored in a JSON file (<code>creds.json</code>) with environment-specific configurations and are accessed through the singleton Instance property.</p>"},{"location":"login-creds/#class-definition","title":"Class Definition","text":"LoginCreds.cs <pre><code>public class LoginCreds\n</code></pre>"},{"location":"login-creds/#properties","title":"Properties","text":"InstanceHR_EmailHR_Pwd <ul> <li><code>Instance</code>: Provides access to the singleton instance of the LoginCreds class.</li> </ul> <pre><code>public static LoginCreds Instance =&gt; _instance.Value;\n</code></pre> <ul> <li><code>HR_Email</code>: Retrieves the HR Manager's email address from the environment-specific JSON configuration.</li> </ul> <pre><code>public string HR_Email =&gt; _envConfig.GetProperty(nameof(HR_Email)).GetString();\n</code></pre> <ul> <li><code>HR_Pwd</code>: Retrieves the HR Manager's password from the environment-specific JSON configuration.</li> </ul> <pre><code>public string HR_Pwd =&gt; _envConfig.GetProperty(nameof(HR_Pwd)).GetString();\n</code></pre>"},{"location":"login-creds/#json-configuration","title":"JSON Configuration","text":"<p>The JSON configuration file contains login credentials for different environments. Here is a sample structure:</p> creds.json <pre><code>{\n  \"demo\": {\n    \"HR_Email\": \"&lt;hr-email&gt;\",\n    \"HR_Pwd\": \"&lt;hr-password&gt;\"\n    // Additional credentials as needed for other organizations\n  },\n  \"prod\": {\n    \"HR_Email\": \"&lt;hr-email&gt;\",\n    \"HR_Pwd\": \"&lt;hr-password&gt;\"\n    // Additional credentials as needed\n  },\n  \"dev1\": {\n    // Environment-specific credentials\n  },\n  \"dev2\": {\n    // Environment-specific credentials\n  },\n  \"dev\": {\n    // Environment-specific credentials\n  }\n}\n</code></pre>"},{"location":"login-creds/#usage","title":"Usage","text":"Accessing EmailAccessing Password <pre><code>var hrEmail = LoginCreds.Instance.HR_Email;\n</code></pre> <pre><code>var hrPassword = LoginCreds.Instance.HR_Password;\n</code></pre>"},{"location":"login-creds/#notes","title":"Notes","text":"<ul> <li>The <code>creds.json</code> file contains 3 sets of credentials for different organizations in all environments.</li> <li>There are multiple sets of credential details in <code>creds.json</code> to support different environments (e.g., <code>demo</code>, <code>prod</code>, <code>dev1</code>, <code>dev2</code>, <code>dev</code>).</li> <li>Ensure that the correct environment is configured for the intended use case.</li> </ul>"},{"location":"login-page/","title":"LoginPage","text":"<p>The <code>LoginPage</code> class contains all the locators and methods necessary to interact with the login page.</p>"},{"location":"login-page/#members","title":"Members","text":""},{"location":"login-page/#locators","title":"Locators","text":"<p>The locators used in the <code>LoginPage</code> class aren't disclosed here, you can go through the <code>LoginPage.cs</code> file in the project to view the locators. All locator members are of two types <code>By</code> and <code>IWebElement</code>(using <code>PageObjectFactory</code>). </p>"},{"location":"login-page/#methods","title":"Methods","text":"<p>There are several methods in the <code>LoginPage</code> class that are used to interact with the login page. Some of the methods are private and some are public, italicized methods are private methods.</p>"},{"location":"login-page/#validlogin","title":"ValidLogin","text":"<p>This method is used to login to the application with valid credentials (HR or ESS).</p> Method SignatureParametersFunctionality <pre><code>public void ValidLogin(string user, string pass, string nodeName = null)\n</code></pre> Name Type Description <code>user</code> <code>string</code> The username to be entered in the <code>username</code> field. <code>pass</code> <code>string</code> The password to be entered in the <code>password</code> field. <code>nodeName</code> <code>string</code> The name of the node to be shown on the Extent report. <ol> <li>Navigate to the login page.</li> <li>Hover and click on the <code>HR Immigration</code> or <code>ESS</code> button.</li> <li>Enter the username and password.</li> <li>Click the login button.</li> <li>Wait until the url contains <code>dashboard</code>.</li> </ol>"},{"location":"login-page/#invalidlogin","title":"InvalidLogin","text":"<p>This method is used to check login to the application with invalid credentials.</p> Method SignatureParametersFunctionality <pre><code>public void InvalidLogin(string user, string pass, string nodeName = null)\n</code></pre> Name Type Description <code>user</code> <code>string</code> The username to be entered in the <code>username</code> field. <code>pass</code> <code>string</code> The password to be entered in the <code>password</code> field. <code>nodeName</code> <code>string</code> The name of the node to be shown on the Extent report. <ol> <li>Navigate to the login page.</li> <li>Hover and click on the <code>HR Immigration</code> or <code>ESS</code> button.</li> <li>Enter the username and password.</li> <li>Click the login button.</li> <li>Wait until the error message is displayed.</li> </ol>"},{"location":"login-page/#logout","title":"LogOut","text":"<p>This method is used to logout from the application.</p> Method SignatureParametersFunctionality <pre><code>public void LogOut(string nodeName = null)\n</code></pre> Name Type Description <code>nodeName</code> <code>string</code> The name of the node to be shown on the Extent report. <ol> <li>Click on the user icon.</li> <li>Click on the logout button.</li> <li>Wait until the url is <code>Login_URl</code>.</li> </ol>"},{"location":"login-page/#resetpassword","title":"ResetPassword","text":"<p>This private method is used in ResetPasswordESS method which takes in some functions as parameter and can be used access the reset password page from mail in any of the mail pages (<code>MailhogPage</code> or <code>MailinatorPage</code>).</p> Method SignatureParametersFunctionality <pre><code>private void ResetPassword(IWebDriver driver, string url, Func&lt;By&gt; resetIdFunc, Func&lt;By&gt; resetBtnIdFunc, Action getIFrameFunc, Action&lt;string&gt; searchBarFunc, string email)\n</code></pre> Name Type Description <code>driver</code> <code>IWebDriver</code> The driver instance. <code>url</code> <code>string</code> The url of the mail page. <code>resetIdFunc</code> <code>Func&lt;By&gt;</code> The function to get the reset password link locator. <code>resetBtnIdFunc</code> <code>Func&lt;By&gt;</code> The function to get the reset password button locator. <code>getIFrameFunc</code> <code>Action</code> The function to switch to the iframe. <code>searchBarFunc</code> <code>Action&lt;string&gt;</code> The function to search for the email. <code>email</code> <code>string</code> The email to be searched. <ol> <li>Navigate to the mail page.</li> <li>Search for the email.</li> <li>Click on the reset password link.</li> <li>Switch to the iframe.</li> <li>Ctrl + Click on the reset password button to open the reset password form in a new tab.</li> </ol>"},{"location":"login-page/#validatemail","title":"ValidateMail","text":"<p>This private method is used in ResetPasswordESS method to validate the mail while entering the email to reset password.</p> Method SignatureFunctionality <pre><code>private void ValidateMail()\n</code></pre> <ol> <li>Uses a while loop to implement a retry mechanism (5 retries).</li> <li>Simulate a arrow down key press in the email field.</li> <li>Check if the <code>SendVerificationCode</code> button is enabled.</li> <li>If the button is enabled, break from the while loop.</li> <li>If the button is disabled and retries haven't been exhausted, retry from step 2 again.</li> <li>If the button is disabled and retries have been exhausted, throws an exception saying \"Email details not found\".</li> </ol>"},{"location":"login-page/#resetpasswordess","title":"ResetPasswordESS","text":"<p>This method is used to reset the password for the ESS user.</p> Method SignatureParametersFunctionality <pre><code>public void ResetPasswordESS(string email, string pass, string orgName = null, string nodeName = null)\n</code></pre> Name Type Description <code>email</code> <code>string</code> The email of the user. <code>pass</code> <code>string</code> The new password to be set. <code>orgName</code> <code>string</code> The organization name in case the current candidate is onboarded in multiple organizations. <code>nodeName</code> <code>string</code> The name of the node to be shown on the Extent report. <ol> <li>Open a New tab.</li> <li>Navigate to the mail page.</li> <li>Search for the email.</li> <li>Click on the reset password link.</li> <li>Switch to the iframe.</li> <li>Ctrl + Click on the reset password button to open the reset password form in a new tab.</li> <li>Enter the Email ID.</li> <li>Click on the Send Verification button.</li> <li>Check email for verification code.</li> <li>Enter the verification code in the verification code field and click on the verify button.</li> <li>Enter the new password and confirm password.</li> <li>If the parameter <code>orgName</code> is provided, go to the select organization page and select the organization.</li> <li>Wait until the url contains <code>dashboard</code>.</li> </ol>"},{"location":"login-page/#selectorganization","title":"SelectOrganization","text":"<p>This method is used to select the organization in case the current candidate is onboarded in multiple organizations.</p> Method SignatureParametersFunctionality <pre><code>public void SelectOrganization(string orgName)\n</code></pre> Name Type Description <code>orgName</code> <code>string</code> The organization name to be selected. <ol> <li>Navigate to the <code>SelectOrg_URL</code>.</li> <li>Select the organization based on <code>orgName</code>.</li> <li>Wait until the url contains <code>dashboard</code>.</li> </ol>"},{"location":"maildrop-page/","title":"MaildropPage","text":"<p>The <code>MaildropPage</code> class contains all the locators and methods necessary to interact with the Maildrop page of the application. This was created when we couldn't find an alternative for mailinator when it wasn't working but then we found <code>Alternative Mailinator Domains</code> so this class isn't used as of now.</p>"},{"location":"maildrop-page/#members","title":"Members","text":""},{"location":"maildrop-page/#locators","title":"Locators","text":"<p>The locators used in the <code>MaildropPage</code> class aren't disclosed here, you can go through the <code>MaildropPage.cs</code> file in the project to view the locators. All locator members are of two types <code>By</code> and <code>IWebElement</code>(using <code>PageObjectFactory</code>).</p>"},{"location":"maildrop-page/#methods","title":"Methods","text":"<p>There are only a few methods in the <code>MaildropPage</code> class that are used to interact with the Maildrop page.</p>"},{"location":"maildrop-page/#getiframe","title":"GetIFrame","text":"<p>The <code>GetIFrame</code> method is used to switch to the iframe element on the Maildrop page. This method is used to interact with the email content displayed within the iframe.</p> Method SignatureFunctionalityExample Usage <pre><code>public void GetIFrame()\n</code></pre> <ul> <li>Switch to the iframe element on the Maildrop page.</li> </ul> <pre><code>MaildropPage maildropPage = new MaildropPage();\nmaildropPage.GetIFrame();\n</code></pre>"},{"location":"maildrop-page/#search","title":"Search","text":"<p>The <code>Search</code> method is used to search for an email in the Maildrop page. This method is used to filter emails based on the search criteria provided.</p> Method SignatureParametersFunctionalityExample Usage <pre><code>public void Search(string email)\n</code></pre> Name Type Description <code>email</code> <code>string</code> The email address to search for in the Maildrop page. <ol> <li>Enter the email address in the search field.</li> <li>Click the search button to filter emails based on the search criteria.</li> </ol> <pre><code>MaildropPage maildropPage = new MaildropPage();\nmaildropPage.Search(\"abc123@mail.com\");\n</code></pre>"},{"location":"mailhog-page/","title":"MailhogPage","text":"<p>The <code>MailhogPage</code> class contains all the locators and methods necessary to interact with the Mailhog page. Mailhog is an email testing tool for developers. It captures all the emails sent from the application and displays them in a web interface. The <code>MailhogPage</code> class is used to interact with the Mailhog web interface to verify that emails are being sent correctly. As the UI can take some time to load, the <code>GetShowHeaders</code> and <code>GetHideHeaders</code> methods are used after opening a mail to ensure that the mail body is loaded before proceeding with further actions.</p>"},{"location":"mailhog-page/#members","title":"Members","text":""},{"location":"mailhog-page/#locators","title":"Locators","text":"<p>The locators used in the <code>MailhogPage</code> class aren't disclosed here, you can go through the <code>MailhogPage.cs</code> file in the project to view the locators. All locator members are of two types <code>By</code> and <code>IWebElement</code>(using <code>PageObjectFactory</code>).</p>"},{"location":"mailhog-page/#methods","title":"Methods","text":"<p>There are several methods in the <code>MailhogPage</code> class that are used to interact with the Mailhog page. We shall only see the methods that are used often and not every method.</p>"},{"location":"mailhog-page/#getshowheaders","title":"GetShowHeaders","text":"<p>The <code>GetShowHeaders</code> method is used to scroll to and click on an element identified as <code>showHeaders</code>. This method ensures that the element is brought into view before performing the click action.</p> Method SignatureFunctionalityExample Usage <pre><code>public void GetShowHeaders()\n</code></pre> <ol> <li>Scroll to Element: Scroll to the <code>showHeaders</code> element to bring it into view.</li> <li>Click on Element: Click on the <code>showHeaders</code> element to display the email headers.</li> </ol> <pre><code>MailhogPage mailhogPage = new MailhogPage();\nmailhogPage.GetShowHeaders();\n</code></pre>"},{"location":"mailhog-page/#gethideheaders","title":"GetHideHeaders","text":"<p>The <code>GetHideHeaders</code> method is used to scroll to and click on an element identified as <code>hideHeaders</code>. This method ensures that the element is brought into view before performing the click action.</p> Method SignatureFunctionalityExample Usage <pre><code>public void GetHideHeaders()\n</code></pre> <ol> <li>Scroll to Element: Scroll to the <code>hideHeaders</code> element to bring it into view.</li> <li>Click on Element: Click on the <code>hideHeaders</code> element to hide the email headers.</li> </ol> <pre><code>MailhogPage mailhogPage = new MailhogPage();\nmailhogPage.GetHideHeaders();\n</code></pre>"},{"location":"mailhog-page/#getiframe","title":"GetIFrame","text":"<p>The <code>GetIFrame</code> method is used to interact with and switch to an <code>iframe</code> inside a mail in mailhog page. It utilizes both <code>GetShowHeaders</code> and <code>GetHideHeaders</code> to ensure that the iframe is loaded properly before switching to it.</p> Method SignatureFunctionalityExample Usage <pre><code>public void GetIFrame()\n</code></pre> <ol> <li>Get Show Headers: Call the <code>GetShowHeaders</code> method to ensure the mail body is loaded.</li> <li>Get Hide Headers: Call the <code>GetHideHeaders</code> method to ensure the mail body is loaded.</li> <li>Switch to IFrame: Switch to the <code>iframe</code> containing the mail body.</li> </ol> <pre><code>MailhogPage mailhogPage = new MailhogPage();\nmailhogPage.GetIFrame();\n</code></pre>"},{"location":"mailhog-page/#search","title":"Search","text":"<p>The <code>Search</code> method is used to search for an email in the Mailhog page. It takes the email id as a parameter and searches for that it.</p> Method SignatureParametersFunctionalityExample Usage <pre><code>public void Search(string mail)\n</code></pre> Name Type Description <code>mail</code> <code>string</code> The email id to be searched. <ol> <li>Enter Email: Enter the email id in the search bar.</li> <li>Click Enter: Click on the enter button to search for the email.</li> </ol> <pre><code>MailhogPage mailhogPage = new MailhogPage();\nmailhogPage.Search(\"abc123@mail.com\");\n</code></pre>"},{"location":"mailinator-page/","title":"MailinatorPage","text":"<p>The <code>MailinatorPage</code> class contains all the locators, and methods necessary to interact with the Mailinator page of the application. The Mailinator page is used to view and manage emails received by the application.</p>"},{"location":"mailinator-page/#members","title":"Members","text":""},{"location":"mailinator-page/#locators","title":"Locators","text":"<p>The locators used in the <code>MailinatorPage</code> class aren't disclosed here, you can go through the <code>MailinatorPage.cs</code> file in the project to view the locators. All locator members are of two types <code>By</code> and <code>IWebElement</code>(using <code>PageObjectFactory</code>).</p>"},{"location":"mailinator-page/#methods","title":"Methods","text":"<p>There are several methods in the <code>MailinatorPage</code> class that are used to interact with the Mailinator page. We shall only see the methods that are used often and not every method.</p>"},{"location":"mailinator-page/#getrandommailinatordomain","title":"GetRandomMailinatorDomain","text":"<p>The <code>GetRandomMailinatorDomain</code> method generates a random email domain from a predefined list of Mailinator domains. This can be useful for generating temporary or disposable email addresses for testing purposes.</p> Method SignatureReturnsFunctionalityDomain List <pre><code>public static string GetRandomMailinatorDomain()\n</code></pre> <p><code>string</code>: A randomly selected Mailinator domain from the predefined list.</p> <ol> <li>Select Random Domain: Randomly select a Mailinator domain from the predefined list.</li> <li>Return Domain: Return the selected domain as a string.</li> </ol> <pre><code>var allDomains = new string[]\n{\n    \"@binkmail.com\",\n    \"@bobmail.info\",\n    \"@chammy.info\",\n    \"@devnullmail.com\",\n    \"@mailinater.com\",\n    \"@mailinator.net\",\n    \"@notmailinator.com\",\n    \"@reallymymail.com\",\n    \"@safetymail.info\",\n    \"@sendspamhere.com\",\n    \"@sogetthis.com\",\n    \"@spamhereplease.com\",\n    \"@suremail.info\",\n    \"@thisisnotmyrealemail.com\",\n    \"@tradermail.info\",\n    \"@veryrealemail.com\",\n    \"@zippymail.info\",\n};\n</code></pre>"},{"location":"mailinator-page/#getiframe","title":"GetIFrame","text":"<p>The <code>GetIFrame</code> method is used to switch to the iframe containing the email content. This method is necessary to interact with the email content displayed within the iframe.</p> Method SignatureFunctionalityExample Usage <pre><code>public void GetIFrame()\n</code></pre> <ul> <li>Switch the driver context to the iframe containing the email content.</li> </ul> <pre><code>MailinatorPage mailinatorPage = new MailinatorPage();\nmailinatorPage.GetIFrame();\n</code></pre>"},{"location":"mailinator-page/#search","title":"Search","text":"<p>The <code>Search</code> method is used to search for an email in the Mailinator page. It takes the email id as a parameter and searches for that email.</p> Method SignatureParametersFunctionalityExample Usage <pre><code>public void Search(string mail)\n</code></pre> Name Type Description <code>mail</code> <code>string</code> The email id to be searched. <ol> <li>Enter Email: Enter the email id in the search bar.</li> <li>Click Enter: Click on the enter button to search for the email.</li> </ol> <pre><code>MailinatorPage mailinatorPage = new MailinatorPage();\nmailinatorPage.Search(\"abc123@mail.com\");\n</code></pre>"},{"location":"onboard-page/","title":"OnboardPage","text":"<p>The <code>OnboardPage</code> contains all the classes, locators and methods necessary to interact with the Onboard page.</p>"},{"location":"onboard-page/#members","title":"Members","text":""},{"location":"onboard-page/#classes","title":"Classes","text":"<p>The <code>OnboardPage</code> class contains the following classes:</p>"},{"location":"onboard-page/#onboarddetails","title":"OnboardDetails","text":"<p>The <code>OnboardDetails</code> class is designed to hold and manage employee onboarding information. It encapsulates various personal and employment-related details for an employee.</p> ConstructorParametersPropertiesConstructor LogicExample Usage <pre><code>public OnboardDetails(\n    string taxTerms,\n    string firstName,\n    string lastName,\n    string designation,\n    string email,\n    string phone,\n    string employmentType,\n    string employeeID = null,\n    string dob = null,\n    string gender = null,\n    string address1 = null,\n    string address2 = null,\n    string city = null,\n    string state = null,\n    string zip = null,\n    string startDate = null,\n    string workAuthType = null,\n    bool? isBilling = null,\n    string wageRate = null,\n    string wageFrom = null,\n    string wageTo = null,\n    string wageCycle = null,\n    string department = null,\n    string reportingTo = null,\n    bool? isTrainee = null\n)\n</code></pre> Name Type Description <code>taxTerms</code> <code>string</code> The tax terms under which the employee is employed. <code>firstName</code> <code>string</code> The first name of the employee. <code>lastName</code> <code>string</code> The last name of the employee. <code>designation</code> <code>string</code> The job title or designation of the employee. <code>email</code> <code>string</code> The email address of the employee. <code>phone</code> <code>string</code> The phone number of the employee. <code>employmentType</code> <code>string</code> The type of employment (e.g., full-time, part-time). <code>employeeID</code> <code>string</code> The unique identifier for the employee. Default is <code>null</code>. <code>dob</code> <code>string</code> The date of birth of the employee. Default is <code>null</code>. <code>gender</code> (optional) <code>string</code> The gender of the employee. Default is <code>null</code>. <code>address1</code> (optional) <code>string</code> The primary address line of the employee. Default is <code>null</code>. <code>address2</code> (optional) <code>string</code> The secondary address line of the employee. Default is <code>null</code>. <code>city</code> (optional) <code>string</code> The city of the employee's address. Default is <code>null</code>. <code>state</code> (optional) <code>string</code> The state of the employee's address. Default is <code>null</code>. <code>zip</code> (optional) <code>string</code> The ZIP code of the employee's address. Default is <code>null</code>. <code>startDate</code> (optional) <code>string</code> The start date of employment or contract. Default is <code>null</code>. <code>workAuthType</code> (optional) <code>string</code> The type of work authorization the employee has. Default is <code>null</code>. <code>isBilling</code> (optional) <code>bool?</code> Indicates if the employee is billable. Default is <code>null</code>. <code>wageRate</code> (optional) <code>string</code> The wage rate of the employee. Default is <code>null</code>. <code>wageFrom</code> (optional) <code>string</code> The minimum wage rate of the employee. Default is <code>null</code>. <code>wageTo</code> (optional) <code>string</code> The maximum wage rate of the employee. Default is <code>null</code>. <code>wageCycle</code> (optional) <code>string</code> The wage cycle (e.g., weekly, bi-weekly). Default is <code>null</code>. <code>department</code> (optional) <code>string</code> The department to which the employee belongs. Default is <code>null</code>. <code>reportingTo</code> (optional) <code>string</code> The supervisor or manager the employee reports to. Default is <code>null</code>. <code>isTrainee</code> (optional) <code>bool?</code> Indicates if the employee is a trainee. Default is <code>null</code>. Name Type Description <code>FirstName</code> <code>string</code> The first name of the employee. <code>LastName</code> <code>string</code> The last name of the employee. <code>Designation</code> <code>string</code> The job title or designation of the employee. <code>EmployeeID</code> <code>string</code> The unique identifier for the employee. <code>Email</code> <code>string</code> The email address of the employee. <code>Phone</code> <code>string</code> The phone number of the employee. <code>Dob</code> <code>string</code> The date of birth of the employee. <code>Gender</code> <code>string</code> The gender of the employee. <code>Address1</code> <code>string</code> The primary address line of the employee. <code>Address2</code> <code>string</code> The secondary address line of the employee. <code>City</code> <code>string</code> The city of the employee's address. <code>State</code> <code>string</code> The state of the employee's address. <code>Zip</code> <code>string</code> The ZIP code of the employee's address. <code>EmploymentType</code> <code>string</code> The type of employment (e.g., full-time, part-time). <code>TaxTerms</code> <code>string</code> The tax terms under which the employee is employed (e.g., W2, C2C, 1099). <code>EmploymentStartDate</code> <code>string</code> The start date of employment for W2 employees. <code>ContractStartDate</code> <code>string</code> The start date of contract for C2C or 1099 employees. <code>WorkAuthType</code> <code>string</code> The type of work authorization the employee has. <code>IsBilling</code> <code>bool</code> Indicates if the employee is billable. <code>WageRate</code> <code>string</code> The wage rate of the employee. <code>WageFrom</code> <code>string</code> The minimum wage rate of the employee. <code>WageTo</code> <code>string</code> The maximum wage rate of the employee. <code>WageCycle</code> <code>string</code> The wage cycle (e.g., weekly, bi-weekly). <code>Department</code> <code>string</code> The department to which the employee belongs. <code>ReportingTo</code> <code>string</code> The supervisor or manager the employee reports to. <code>IsTrainee</code> <code>bool</code> Indicates if the employee is a trainee. <code>IsTraineeText</code> <code>string</code> A textual representation of whether the employee is a trainee (\"y\" for yes, \"n\" for no). <ul> <li>Initializes properties with provided values.</li> <li>Sets <code>EmploymentStartDate</code> or <code>ContractStartDate</code> based on <code>TaxTerms</code>.</li> <li>Determines <code>IsTrainee</code> based on <code>TaxTerms</code> and <code>WorkAuthType</code>.</li> <li>Sets <code>IsTraineeText</code> based on <code>IsTrainee</code> and <code>TaxTerms</code>.</li> </ul> <pre><code>var onboardDetails = new OnboardDetails(\n    taxTerms: \"W2\",\n    firstName: \"John\",\n    lastName: \"Doe\",\n    designation: \"Software Engineer\",\n    email: \"john.doe@example.com\",\n    phone: \"123-456-7890\",\n    employmentType: \"Full-Time\",\n    startDate: \"2023-01-01\",\n    workAuthType: \"US Citizen\"\n);\n</code></pre>"},{"location":"onboard-page/#onboarddetailsmap","title":"OnboardDetailsMap","text":"<p>The <code>OnboardDetailsMap</code> class is a mapping configuration for the <code>OnboardDetails</code> class. It is used to map CSV columns to the properties of the <code>OnboardDetails</code> class using the <code>CsvHelper</code> library.</p> ConstructorMapped PropertiesExample Usage <pre><code>public class OnboardDetailsMap : ClassMap&lt;OnboardDetails&gt;\n{\n    public OnboardDetailsMap()\n    {\n        Map(m =&gt; m.FirstName).Name(\"First Name*\");\n        Map(m =&gt; m.LastName).Name(\"Last Name*\");\n        Map(m =&gt; m.Designation).Name(\"Designation*\");\n        Map(m =&gt; m.EmployeeID).Name(\"Employee ID\");\n        Map(m =&gt; m.Dob).Name(\"Date of Birth\").TypeConverterOption.Format(\"M/d/yyyy\");\n        Map(m =&gt; m.Gender).Name(\"Gender\");\n        Map(m =&gt; m.Phone).Name(\"Phone Number*\");\n        Map(m =&gt; m.Email).Name(\"Email ID*\");\n        Map(m =&gt; m.EmploymentType).Name(\"Employment Type*\");\n        Map(m =&gt; m.EmploymentStartDate).Name(\"Employment Start Date+\").TypeConverterOption.Format(\"M/d/yyyy\");\n        Map(m =&gt; m.ContractStartDate).Name(\"Contract Start Date+\").TypeConverterOption.Format(\"M/d/yyyy\");\n        Map(m =&gt; m.Address1).Name(\"Address Line 1\");\n        Map(m =&gt; m.Address2).Name(\"Address Line 2\");\n        Map(m =&gt; m.City).Name(\"City\");\n        Map(m =&gt; m.State).Name(\"State\");\n        Map(m =&gt; m.Zip).Name(\"Zip Code\");\n        Map(m =&gt; m.TaxTerms).Name(\"Tax Terms*\");\n        Map(m =&gt; m.WorkAuthType).Name(\"Work Authorization Type+\");\n        Map(m =&gt; m.WageRate).Name(\"Wage Rate (Offered Salary)\");\n        Map(m =&gt; m.WageCycle).Name(\"Wage Cycle\");\n        Map(m =&gt; m.Department).Name(\"Department\");\n        Map(m =&gt; m.ReportingTo).Name(\"Reporting To Email\");\n        Map(m =&gt; m.IsTraineeText).Name(\"IsTrainee\");\n    }\n}\n</code></pre> CSV Column Property First Name* <code>FirstName</code> Last Name* <code>LastName</code> Designation* <code>Designation</code> Employee ID <code>EmployeeID</code> Date of Birth <code>Dob</code> Gender <code>Gender</code> Phone Number* <code>Phone</code> Email ID* <code>Email</code> Employment Type* <code>EmploymentType</code> Employment Start Date+ <code>EmploymentStartDate</code> Contract Start Date+ <code>ContractStartDate</code> Address Line 1 <code>Address1</code> Address Line 2 <code>Address2</code> City <code>City</code> State <code>State</code> Zip Code <code>Zip</code> Tax Terms* <code>TaxTerms</code> Work Authorization Type+ <code>WorkAuthType</code> Wage Rate (Offered Salary) <code>WageRate</code> Wage Cycle <code>WageCycle</code> Department <code>Department</code> Reporting To Email <code>ReportingTo</code> IsTrainee <code>IsTraineeText</code> <p><pre><code>using CsvHelper;\nusing CsvHelper.Configuration;\nusing System.Globalization;\nusing System.IO;\n\npublic class Program\n{\n    public static void Main()\n    {\n        using (var reader = new StreamReader(\"path/to/your/csvfile.csv\"))\n        using (var csv = new CsvReader(reader, new CsvConfiguration(CultureInfo.InvariantCulture)\n        {\n            Delimiter = \",\",\n            HasHeaderRecord = true,\n        }))\n        {\n            csv.Context.RegisterClassMap&lt;OnboardDetailsMap&gt;();\n            var records = csv.GetRecords&lt;OnboardDetails&gt;().ToList();\n\n            foreach (var record in records)\n            {\n                Console.WriteLine($\"First Name: {record.FirstName}, Last Name: {record.LastName}\");\n            }\n        }\n    }\n}\n</code></pre> Note: This is only an example implementation on how to use it. This <code>ClassMap</code> is already used in <code>BulkOnboard</code> functionality.</p>"},{"location":"onboard-page/#locators","title":"Locators","text":"<p>The locators used in the <code>OnboardPage</code> class aren't disclosed here, you can go through the <code>OnboardPage.cs</code> file in the project to view the locators. All locator members are of two types <code>By</code> and <code>IWebElement</code>(using <code>PageObjectFactory</code>).</p>"},{"location":"onboard-page/#methods","title":"Methods","text":"<p>There are several methods in the <code>OnboardPage</code> class that are used to interact with the Onboard page. Some of the methods are private and some are public, italicized methods are private methods.</p>"},{"location":"onboard-page/#singleonboard","title":"SingleOnboard","text":"<p>The <code>SingleOnboard</code> method is designed to onboard a single employee using the details provided in an <code>OnboardDetails</code> type object.</p> Method SignatureParametersFunctionalityExample Usage <pre><code>public void SingleOnboard(OnboardDetails onboardDetails, string nodeName = null)\n</code></pre> Name Type Description <code>onboardDetails</code> <code>OnboardDetails</code> The employee details to onboard. <code>nodeName</code> (optional) <code>string</code> The name of the node to be shown in the report. Default is <code>null</code>. <ul> <li>Initialization: Sets <code>nodeName</code> to \"Onboard\" if it is null. Extracts individual properties from the <code>onboardDetails</code> object.</li> <li>Navigation: Navigates to the single onboard URL.</li> <li>Input Fields: Fills in the input fields with the provided employee details.</li> <li>Logging: Logs each substep to the report to provide detailed feedback on the progress of the onboarding process.</li> <li>Submission: Clicks the onboard button to submit the form.</li> </ul> <pre><code>var onboardDetails = new OnboardDetails(\n    taxTerms: \"W2\",\n    firstName: \"Jane\",\n    lastName: \"Doe\",\n    designation: \"Software Engineer\",\n    email: \"jane.doe@example.com\",\n    phone: \"123-456-7890\",\n    employmentType: \"Full-Time\",\n    startDate: \"2023-01-01\",\n    workAuthType: \"Citizen\"\n);\n\nSingleOnboard(onboardDetails);\n</code></pre>"},{"location":"onboard-page/#downloadmultionboardcsv","title":"DownloadMultiOnboardCsv","text":"<p>The <code>DownloadMultiOnboardCsv</code> method navigates to the bulk onboarding URL, downloads a CSV file for multiple onboardings, and returns the path of the downloaded file.</p> Method SignatureParametersFunctionalityExample Usage <pre><code>public string DownloadMultiOnboardCsv(string nodeName = null)\n</code></pre> Name Type Description <code>nodeName</code> (optional) <code>string</code> The name of the node to be shown in the report. Default is <code>null</code>. <ul> <li>Navigation: Navigates to the bulk onboard URL.</li> <li>Initialization: Determines the download path and initial file count in the directory.</li> <li>Download CSV: Clicks the download button for the bulk onboarding CSV.</li> <li>Wait for Download: Waits for the download to complete and retrieves the latest downloaded file.</li> <li>File Validation: Ensures the downloaded file is not a temporary or incomplete file.</li> <li>Return File Path: Returns the full path of the downloaded file.</li> </ul> <pre><code>string downloadedCsvPath = DownloadMultiOnboardCsv(\"BulkOnboard\");\nConsole.WriteLine($\"Downloaded CSV path: {downloadedCsvPath}\");\n</code></pre>"},{"location":"onboard-page/#writeonboarddetailstocsv","title":"WriteOnboardDetailsToCsv","text":"<p>The <code>WriteOnboardDetailsToCsv</code> method writes a list of <code>OnboardDetails</code> objects to a CSV file. The method can either create a new CSV file or overwrite an existing one.</p> Method SignatureParametersFunctionalityExample Usage <pre><code>private string WriteOnboardDetailsToCsv(string filePath, List&lt;OnboardDetails&gt; onboardDetailsList, string nodeName = null)\n</code></pre> Name Type Description <code>filePath</code> <code>string</code> The path of the CSV file to write the onboard details to. <code>onboardDetailsList</code> <code>List&lt;OnboardDetails&gt;</code> The list of employee details to write to the CSV file. <code>nodeName</code> (optional) <code>string</code> The name of the node to be shown in the report. Default is <code>null</code>. <ol> <li>Open/Create CSV File:<ul> <li>Opens the file at filePath for reading and writing, allowing shared access for reading and writing.</li> <li>Uses a StreamWriter to write to the file.</li> <li>Uses CsvWriter from the CsvHelper library to handle CSV writing with the specified culture (CultureInfo.InvariantCulture).</li> </ul> </li> <li>Register Class Map and Write Header:<ul> <li>Registers the OnboardDetailsMap class map to define the CSV column mappings.</li> <li>Writes the header row for the OnboardDetails class.</li> <li>Moves to the next record to begin writing data rows.</li> </ul> </li> <li>Write Onboard Details:<ul> <li>Writes each OnboardDetails object in onboardDetailsList to the CSV file.</li> </ul> </li> <li>Exception Handling:<ul> <li>Catches any exceptions that may occur and handles them appropriately (e.g., logging the exception).</li> </ul> </li> <li>Return File Path:<ul> <li>Returns the path of the CSV file after writing is complete.</li> </ul> </li> </ol> <pre><code>List&lt;OnboardDetails&gt; onboardDetailsList = new List&lt;OnboardDetails&gt;\n{\n    new OnboardDetails(\"W2\", \"John\", \"Doe\", \"Developer\", \"john.doe@example.com\", \"1234567890\", \"Full-Time\"),\n    new OnboardDetails(\"C2C\", \"Jane\", \"Smith\", \"Manager\", \"jane.smith@example.com\", \"0987654321\", \"Contractor\")\n};\n\nstring filePath = \"path/to/onboard_details.csv\";\nstring resultFilePath = WriteOnboardDetailsToCsv(filePath, onboardDetailsList, \"OnboardDetailsWrite\");\nConsole.WriteLine($\"CSV file written to: {resultFilePath}\");\n</code></pre>"},{"location":"onboard-page/#validateimporteddata","title":"ValidateImportedData","text":"<p>The <code>ValidateImportedData</code> method validates the details of onboarded candidates from a provided list against the data displayed on a web page. It performs the validation by comparing the data in the <code>OnboardDetails</code> objects to the corresponding elements on the web page.</p> Method SignatureParametersFunctionalityExample Usage <pre><code>private void ValidateImportedData(List&lt;OnboardDetails&gt; onboardDetailsList, string nodeName = null)\n</code></pre> Name Type Description <code>onboardDetailsList</code> <code>List&lt;OnboardDetails&gt;</code> The list of employee details to validate. <code>nodeName</code> (optional) <code>string</code> The name of the node to be shown in the report. Default is <code>null</code>. <ol> <li>Define Index Mappings:<ul> <li>Defines the index positions for various fields in the table on the web page.</li> </ul> </li> <li>Dynamic Locators:<ul> <li>Defines <code>dynamicLocatorFixed</code> and <code>dynamicLocator</code> methods to generate XPath locators for table cells.</li> </ul> </li> <li>Validation Loop:<ul> <li>Iterates through each <code>OnboardDetails</code> object in the list.</li> <li>Generates the XPath locators for the corresponding fields.</li> <li>Validates each field (e.g., <code>FirstName</code>, <code>LastName</code>, <code>Designation</code>, etc.) by comparing the text in the web element to the value in the <code>OnboardDetails</code> object.</li> <li>Scrolls to and highlights the element before validation for visual verification.</li> <li>Unhighlights the element after validation.</li> </ul> </li> <li>Special Handling:<ul> <li>For <code>Gender</code>, checks if the value is \"I choose not to disclose\" and validates accordingly.</li> <li>For <code>EmploymentStartDate</code> vs. <code>ContractStartDate</code>, chooses the correct field based on the <code>TaxTerms</code>.</li> <li>For <code>IsTrainee</code>, sets the expected value based on conditions and validates it.</li> </ul> </li> </ol> <pre><code>List&lt;OnboardDetails&gt; onboardDetailsList = new List&lt;OnboardDetails&gt;\n{\n    new OnboardDetails(\"W2\", \"John\", \"Doe\", \"Developer\", \"john.doe@example.com\", \"1234567890\", \"Full-Time\"),\n    new OnboardDetails(\"C2C\", \"Jane\", \"Smith\", \"Manager\", \"jane.smith@example.com\", \"0987654321\", \"Contractor\")\n};\n\nValidateImportedData(onboardDetailsList, \"OnboardDetailsValidation\");\n</code></pre>"},{"location":"onboard-page/#skipimport","title":"SkipImport","text":"<p>The <code>SkipImport</code> method processes a list of onboarded candidate details, identifies any failed or duplicate records, and skips their import. This method interacts with web elements to resolve conflicts and update the list of onboard details accordingly.</p> Method SignatureParametersReturnsFunctionalityExample Usage <pre><code>private List&lt;OnboardDetails&gt; SkipImport(List&lt;OnboardDetails&gt; onboardDetailsList, string nodeName = null)\n</code></pre> Name Type Description <code>onboardDetailsList</code> <code>List&lt;OnboardDetails&gt;</code> The list of employee details to validate. <code>nodeName</code> (optional) <code>string</code> The name of the node to be shown in the report. Default is <code>null</code>. <ul> <li>A list of <code>OnboardDetails</code> objects that are ready for import after resolving any conflicts.</li> </ul> <ol> <li>Define Element Locators:<ul> <li><code>emailColumnLocator</code>: Locator for the email column in the table.</li> <li><code>UploadCsvResolveNowBtn</code>, <code>SkipImportBtnId()</code>, <code>SkipImportProceedBtnId()</code>: Locators for buttons involved in the process.</li> </ul> </li> <li>Initialize List:<ul> <li><code>failedOrDuplicateDetailsList</code>: List to store details of failed or duplicate records.</li> </ul> </li> <li>Wait and Click:<ul> <li>Waits for the <code>UploadCsvResolveNowBtn</code> to become clickable. If it times out, the method skips to the end.</li> <li>Clicks the resolve button (<code>resolveNowBtn</code>).</li> <li>Waits for the invisibility of the <code>OnblickLogoId</code> element to ensure the page has updated.</li> </ul> </li> <li>Email Comparison:<ul> <li>Finds all elements in the email column.</li> <li>Iterates through the emails and compares each with the emails in the <code>onboardDetailsList</code>.</li> <li>Adds matching records to the <code>failedOrDuplicateDetailsList</code>.</li> </ul> </li> <li>Update List:<ul> <li>Removes the failed or duplicate records from the <code>onboardDetailsList</code>.</li> </ul> </li> <li>Additional Clicking and Logging:<ul> <li>Waits for the skip import button to become clickable, clicks it, and then clicks the proceed button.</li> <li>Logs the substep indicating the import was skipped for failed/duplicate records.</li> <li>Waits for the invisibility of the <code>OnblickLogoId</code> element.</li> </ul> </li> </ol> <p>This method is used in the <code>TrySkipAndValidate</code> method.</p> <pre><code>List&lt;OnboardDetails&gt; onboardDetailsList = /* list of onboard details*/;\nonboardDetailsList = SkipImport(onboardDetailsList, \"SkipImportNode\");\n</code></pre>"},{"location":"onboard-page/#tryskipandvalidate","title":"TrySkipAndValidate","text":"<p>The <code>TrySkipAndValidate</code> method processes a list of <code>OnboardDetails</code> by first skipping the import of failed or duplicate records and then validating the imported data. This ensures that the onboarded data is accurate and free of conflicts. Uses both <code>SkipImport</code> and <code>ValidateImportedData</code> methods.</p> Method SignatureParametersReturnsFunctionality <pre><code>private List&lt;OnboardDetails&gt; TrySkipAndValidate(List&lt;OnboardDetails&gt; onboardDetailsList, string nodeName = null)\n</code></pre> Name Type Description <code>onboardDetailsList</code> <code>List&lt;OnboardDetails&gt;</code> The list of employee details to validate. <code>nodeName</code> (optional) <code>string</code> The name of the node to be shown in the report. Default is <code>null</code>. <ul> <li>A list of <code>OnboardDetails</code> objects that have been successfully imported and validated.</li> </ul> <ol> <li>Skip Import:<ul> <li>Calls the <code>SkipImport</code> method to skip the import of failed or duplicate records.</li> </ul> </li> <li>Validate Imported Data:<ul> <li>Calls the <code>ValidateImportedData</code> method to validate the imported data.</li> </ul> </li> <li>Return List:<ul> <li>Returns the updated list of onboard details after skipping and validation.</li> </ul> </li> </ol>"},{"location":"onboard-page/#uploadcsv","title":"UploadCsv","text":"<p>The <code>UploadCsv</code> method is responsible for uploading a CSV file containing onboarding details to the web application, navigating through the upload process, and ensuring the completion of the upload.</p> Method SignatureParametersFunctionalityExample Usage <pre><code>private void UploadCsv(string filePath, string nodeName = null)\n</code></pre> Name Type Description <code>filePath</code> <code>string</code> The path of the CSV file to upload. <code>nodeName</code> (optional) <code>string</code> The name of the node to be shown in the report. Default is <code>null</code>. <ol> <li>Navigate to Bulk Onboard URL:<ul> <li>Checks if the current URL is the bulk onboarding URL. If not, it navigates to the correct URL.</li> </ul> </li> <li>Upload CSV File:<ul> <li>Waits for the CSV upload element to exist.</li> <li>Uploads the CSV file using the SendKeys method.</li> </ul> </li> <li>Navigate Through Upload Process:<ul> <li>Waits for the \"Next\" button to be clickable and clicks it.</li> <li>Waits for the OnBlick logo to become invisible.</li> <li>Checks if the onboard candidates label is displayed and refreshes the page until it's not visible.</li> </ul> </li> <li>Handle Upload Completion:<ul> <li>Waits for the \"Go to Uploads\" button to be clickable and clicks it.</li> </ul> </li> </ol> <pre><code>string csvFilePath = @\"C:\\path\\to\\your\\csvfile.csv\";\nUploadCsv(csvFilePath, \"Upload Csv\");\n</code></pre>"},{"location":"onboard-page/#cancelimport","title":"CancelImport","text":"<p>The <code>CancelImport</code> method cancels the import process of a CSV file containing onboarding details. It interacts with web elements to cancel the import process and ensures the process is successfully canceled.</p> Method SignatureFunctionality <pre><code>private void CancelImport()\n</code></pre> <ol> <li>Ensures the \"Cancel\" button for the CSV upload is clickable.</li> <li>Clicks the \"Cancel\" button to initiate the cancellation process.</li> <li>Ensures the confirmation buttons are clickable.</li> <li>Clicks the \"No\" button to dismiss the first confirmation dialog.</li> <li>Clicks the \"Cancel\" button again to retry the cancellation.</li> <li>Clicks the \"Yes\" button to confirm the cancellation.</li> <li>Waits for the OnBlick logo to become invisible, indicating that the cancellation is complete.</li> </ol>"},{"location":"onboard-page/#onboardcandidates","title":"OnboardCandidates","text":"<p>The <code>OnboardCandidates</code> method is used to onboard a selected set of candidates in the web application. It performs actions to select all candidate records and initiate the onboarding process, and then waits for a success popup to appear.</p> Method SignatureFunctionality <pre><code>private void OnboardCandidates()\n</code></pre> <ol> <li>Select All Candidates:<ul> <li>Waits for the \"Select All\" checkbox to be clickable and clicks it.</li> </ul> </li> <li>Initiate Onboarding:<ul> <li>Waits for the \"Onboard\" button to be clickable and clicks it.</li> </ul> </li> <li>Wait for Success Popup:<ul> <li>Waits for the success popup to appear, indicating that the onboarding process has been initiated.</li> </ul> </li> </ol>"},{"location":"onboard-page/#editimporteddata","title":"EditImportedData","text":"<p>The <code>EditImportedData</code> method is used to edit the details of an imported candidate in the web application. It selects a candidate, clicks on edit, updates the details, and saves the changes.</p> Method SignatureParametersReturnsFunctionalityUsage <pre><code>private List&lt;OnboardDetails&gt; EditImportedData(List&lt;OnboardDetails&gt; onboardDetailsList, string nodeName = null)\n</code></pre> Name Type Description <code>onboardDetailsList</code> <code>List&lt;OnboardDetails&gt;</code> The list of employee details to validate. <code>nodeName</code> (optional) <code>string</code> The name of the node to be shown in the report. Default is <code>null</code>. <ul> <li>A list of <code>OnboardDetails</code> objects that have been successfully edited.</li> </ul> <ol> <li>Initialize Variables:<ul> <li>Define locators for modal buttons, fields, and record colors.</li> <li>Create a list to hold records with duplicate issues and initialize an updated list of onboard details.</li> </ul> </li> <li>Identify and Delete Duplicate Records:<ul> <li>Find records with a specific background color indicating duplication.</li> <li>For each duplicate record:<ul> <li>Locate the delete button and the email address.</li> <li>Delete the record by clicking the \"Delete\" button and confirm the action.</li> <li>Remove the deleted record from the list and log the action.</li> </ul> </li> </ul> </li> <li>Edit or Delete Records:<ul> <li>For each record in the onboard details list:</li> <li>Randomly decide whether to edit or delete the record.</li> <li>Perform actions based on the decision:<ul> <li>Edit:<ul> <li>Open the edit modal, perform necessary changes, and save the changes.</li> <li>If the record's gender is \"I choose not to disclose\", handle it with a specific select element.</li> <li>Handle missing mandatory fields by selecting options or typing in values.</li> </ul> </li> <li>Delete:<ul> <li>Open the delete modal, click \"No\" to cancel, and then click \"Delete\" to confirm.</li> <li>Remove the deleted record from the list and log the action.</li> </ul> </li> </ul> </li> </ul> </li> <li>Return Updated List:<ul> <li>Return the updated list of onboard details.</li> </ul> </li> </ol> <p>This method is used in the <code>ResolveErrors</code> method.</p> <pre><code>List&lt;OnboardDetails&gt; onboardDetailsList = /* list of onboard details*/;\nonboardDetailsList = EditImportedData(onboardDetailsList, \"EditImportedDataNode\");\n</code></pre>"},{"location":"onboard-page/#resolveerrors","title":"ResolveErrors","text":"<p>The ResolveErrors method aims to handle errors in the onboarding process by clicking the \"Resolve Now\" button and then editing the imported data using <code>EditImportedData</code> to resolve any issues. This method returns the updated list of onboard details after making necessary adjustments.</p> Method SignatureParametersReturnsFunctionalityUsage <pre><code>private List&lt;OnboardDetails&gt; ResolveErrors(List&lt;OnboardDetails&gt; onboardDetailsList, string nodeName = null)\n</code></pre> Name Type Description <code>onboardDetailsList</code> <code>List&lt;OnboardDetails&gt;</code> The list of employee details to validate. <code>nodeName</code> (optional) <code>string</code> The name of the node to be shown in the report. Default is <code>null</code>. <ul> <li>A list of <code>OnboardDetails</code> objects that have been successfully resolved.</li> </ul> <ol> <li>Handle Resolve Now Button:<ul> <li>Waits for the \"Resolve Now\" button to be clickable and clicks it.</li> <li>Waits for the OnBlick logo to become invisible, indicating the page has updated.</li> </ul> </li> <li>Edit Imported Data:<ul> <li>Calls the <code>EditImportedData</code> method to edit the imported data.</li> </ul> </li> <li>Return Updated List:<ul> <li>Returns the updated list of onboard details after resolving errors.</li> </ul> </li> </ol> <p>This method is used in the <code>BulkOnboardNegative</code> method.</p> <pre><code>List&lt;OnboardDetails&gt; onboardDetailsList = /* list of onboard details*/;\nonboardDetailsList = ResolveErrors(onboardDetailsList, \"ResolveErrorsNode\");\n</code></pre>"},{"location":"onboard-page/#bulkonboard","title":"BulkOnboard","text":"<p>The <code>BulkOnboard</code> method is used to perform bulk onboarding of candidates by uploading a CSV file containing their details. It interacts with web elements to upload the CSV file, resolve any conflicts, and validate the imported data. Tihs method uses the <code>DownloadMultiOnboardCsv</code>, <code>WriteOnboardDetailsToCsv</code>, <code>UploadCsv</code>, <code>TrySkipAndValidate</code>, <code>OnboardCandidates</code> methods.</p> Method SignatureParametersReturnsFunctionalityExample Usage <pre><code>public List&lt;OnboardDetails&gt; BulkOnboard(List&lt;OnboardDetails&gt; onboardDetailsList, string nodeName = null)\n</code></pre> Name Type Description <code>onboardDetailsList</code> <code>List&lt;OnboardDetails&gt;</code> The list of employee details to validate. <code>nodeName</code> (optional) <code>string</code> The name of the node to be shown in the report. Default is <code>null</code>. <ul> <li>A list of <code>OnboardDetails</code> objects that have been successfully onboarded.</li> </ul> <ol> <li>Download CSV:<ul> <li>Calls the <code>DownloadMultiOnboardCsv</code> method to download the CSV file.</li> </ul> </li> <li>Write to CSV:<ul> <li>Calls the <code>WriteOnboardDetailsToCsv</code> method to write the onboard details to the CSV file.</li> </ul> </li> <li>Upload CSV:<ul> <li>Calls the <code>UploadCsv</code> method to upload the CSV file.</li> </ul> </li> <li>Try Skip and Validate:<ul> <li>Calls the <code>TrySkipAndValidate</code> method to skip and validate the imported data.</li> </ul> </li> <li>Onboard Candidates:<ul> <li>Calls the <code>OnboardCandidates</code> method to onboard the candidates.</li> </ul> </li> <li>Return Updated List:<ul> <li>Returns the updated list of onboard details after bulk onboarding.</li> </ul> </li> </ol> <pre><code>List&lt;OnboardDetails&gt; onboardDetailsList = /* list of onboard details*/;\nonboardDetailsList = BulkOnboard(onboardDetailsList, \"BulkOnboardNode\");\n</code></pre>"},{"location":"onboard-page/#bulkonboardnegative","title":"BulkOnboardNegative","text":"<p>The <code>BulkOnboardNegative</code> method handles the process of bulk onboarding candidates with an intentional error handling workflow. This includes uploading a CSV file, cancelling the import, resolving any errors, validating the imported data, and onboarding the candidates. The method returns a list of onboard details after successful processing. This method uses the <code>DownloadMultiOnboardCsv</code>, <code>WriteOnboardDetailsToCsv</code>, <code>UploadCsv</code>, <code>CancelImport</code>, <code>ResolveErrors</code>, and <code>ValidateImportedData</code>, <code>OnboardCandidates</code> methods.</p> Method SignatureParametersReturnsFunctionalityExample Usage <pre><code>public List&lt;OnboardDetails&gt; BulkOnboardNegative(List&lt;OnboardDetails&gt; onboardDetailsListIncomplete, List&lt;OnboardDetails&gt; onboardDetailsList, string nodeName = null)\n</code></pre> Name Type Description <code>onboardDetailsListIncomplete</code> <code>List&lt;OnboardDetails&gt;</code> The list of incomplete employee details to validate. <code>onboardDetailsList</code> <code>List&lt;OnboardDetails&gt;</code> The list of complete employee details to validate. <code>nodeName</code> (optional) <code>string</code> The name of the node to be shown in the report. Default is <code>null</code>. <ul> <li>A list of <code>OnboardDetails</code> objects that have been successfully onboarded.\"</li> </ul> <ol> <li>Download CSV:<ul> <li>Calls the <code>DownloadMultiOnboardCsv</code> method to download the CSV file.</li> </ul> </li> <li>Write to CSV:<ul> <li>Calls the <code>WriteOnboardDetailsToCsv</code> method to write the onboard details to the CSV file.</li> </ul> </li> <li>Upload CSV:<ul> <li>Calls the <code>UploadCsv</code> method to upload the CSV file.</li> </ul> </li> <li>Cancel Import:<ul> <li>Calls the <code>CancelImport</code> method to cancel the import process.</li> </ul> </li> <li>Resolve Errors:<ul> <li>Calls the <code>ResolveErrors</code> method to resolve any errors in the import process.</li> </ul> </li> <li>Validate Imported Data:<ul> <li>Calls the <code>ValidateImportedData</code> method to validate the imported data.</li> </ul> </li> <li>Onboard Candidates:<ul> <li>Calls the <code>OnboardCandidates</code> method to onboard the candidates.</li> </ul> </li> <li>Return Updated List:<ul> <li>Returns the updated list of onboard details after bulk onboarding.</li> </ul> </li> </ol> <pre><code>List&lt;OnboardDetails&gt; onboardDetailsListIncomplete = /* list of incomplete onboard details*/;\nList&lt;OnboardDetails&gt; onboardDetailsList = /* list of onboard details*/;\nList&lt;OnboardDetails&gt; onboardedDetails = BulkOnboardNegative(onboardDetailsListIncomplete, onboardDetailsList, \"BulkOnboardNegativeNode\");\n</code></pre>"},{"location":"pom-guidelines/","title":"Project Guidelines","text":"<p>Page Object Model in our current Project follows some guidelines and practices. These guidelines are created to ensure that the project is maintainable, scalable and readable.</p>"},{"location":"pom-guidelines/#constructing-locators","title":"Constructing Locators","text":"<p>Below are the conventions to follow for writing locators in the project:</p> <ol> <li>Use ID, Name, CSS, XPath locators in the order of preference:<ul> <li>ID is the most preferred locator followed by Name, CSS and XPath.</li> <li>If ID is not available, use Name locator.</li> <li>If Name locator is not available, use CSS locator.</li> <li>If CSS locator is not available, use XPath locator.</li> <li>But more often than not, in Onblick 2.0 ID, Class, CSS locators are dynamically generated. So it is better to use XPath locators.</li> </ul> </li> <li>Use Relative XPath:<ul> <li>Always use relative XPath instead of absolute XPath.</li> <li>Avoid using absolute XPath as it is not reliable and breaks easily.</li> <li>Use XPath axes like <code>following-sibling</code>, <code>preceding-sibling</code>, <code>parent</code>, <code>child</code>, <code>ancestor</code>, <code>descendant</code> etc. to create more reliable XPath.</li> <li>Use <code>normalize-space</code>, <code>contains</code>, <code>starts-with</code>, <code>ends-with</code> functions in XPath to create more reliable XPath.</li> </ul> </li> </ol> Example <pre><code>// Relative XPath\nBy.XPath(\"//input[@id='username']\")\n\n// Absolute XPath\nBy.XPath(\"/html/body/div[1]/div[2]/div[3]/div[4]/input\")\n</code></pre>"},{"location":"pom-guidelines/#best-practices-for-current-project","title":"Best Practices for Current Project","text":"<ol> <li>Use Page Object Model:<ul> <li>Use Page Object Model to create a separate class for each page.</li> <li>Define all the locators (and methods - optional) related to that page in that class.</li> </ul> </li> <li>Use Page Factory:<ul> <li>Use Page Factory to initialize the elements in the page class.</li> <li>Use <code>FindsBy</code> annotation to define the locators in the page class.</li> <li>Use <code>PageFactory.InitElements(driver, this)</code> to initialize the elements in the page class.</li> <li>Note: <code>PageFactory</code> was used in the current project in almost all page object classes. However, the more recent versions of Selenium do not support <code>PageFactory</code> so it is better to avoid using it in the new page object classes.</li> </ul> </li> </ol> ExampleExample of PageFactoryPageObject Class <pre><code>private readonly By Username = By.Id(\"username\"); public By UsernameId() { return Username; }\nprivate readonly By Password = By.Id(\"password\"); public By PasswordId() { return Password; }\n</code></pre> <pre><code>//Only in case you do end up using it, here is an example of how to use it:\n[FindsBy(How = How.Id, Using = \"username\")]\nprivate IWebElement Username\n\n[FindsBy(How = How.Id, Using = \"password\")]\nprivate IWebElement Password\n</code></pre> <pre><code>public class LoginPage\n{\n    private readonly IWebDriver driver;\n\n    private readonly By Username = By.Id(\"username\"); public By UsernameId() { return Username; }\n    private readonly By Password = By.Id(\"password\"); public By PasswordId() { return Password; }\n\n    public LoginPage(IWebDriver driver)\n    {\n        this.driver = driver;\n        PageFactory.InitElements(driver, this);\n    }\n\n    [FindsBy(How = How.Id, Using = \"username\")]\n    private IWebElement Username;\n\n    [FindsBy(How = How.Id, Using = \"password\")]\n    private IWebElement Password;\n\n    public void Login(string username, string password)\n    {\n        Username.SendKeys(username);\n        Password.SendKeys(password);\n    }\n}\n</code></pre>"},{"location":"pom-introduction/","title":"Page Object Model","text":""},{"location":"pom-introduction/#introduction","title":"Introduction","text":"<p>Page Object Model is a design pattern which has become popular in test automation for enhancing test maintenance and reducing code duplication. A page object is an object-oriented class that serves as an interface to a page of your application. </p>"},{"location":"pom-introduction/#benefits-of-page-object-model","title":"Benefits of Page Object Model","text":"<ol> <li>Code Reusability: Page Object Model allows you to write your tests in a more modular way, which means that you can reuse the same page object in multiple tests. This reduces code duplication and makes your tests easier to maintain.</li> <li>Code Maintainability: Page Object Model makes your tests more maintainable because it separates the test logic from the page-specific logic. This means that if the page changes, you only need to update the page object, rather than updating all of your tests.</li> <li>Readability: Page Object Model makes your tests more readable because it encapsulates the page-specific logic in a separate class. This makes it easier to understand what the test is doing, and makes it easier to write new tests.</li> <li>Reduced Code Duplication: Page Object Model reduces code duplication by encapsulating the page-specific logic in a separate class. This means that you only need to write the page-specific logic once, rather than duplicating it in multiple tests.</li> <li>Improved Test Stability: Page Object Model improves test stability by encapsulating the page-specific logic in a separate class. This means that if the page changes, you only need to update the page object, rather than updating all of your tests.</li> </ol>"},{"location":"pom-introduction/#page-object-model-in-selenium","title":"Page Object Model in Selenium","text":"<p>In Selenium, Page Object Model is implemented by creating a separate class for each page of your application. Each page object class contains the page-specific logic, such as finding elements on the page and interacting with them. The test logic is then written in separate test classes, which use the page object classes to interact with the pages of the application.</p>"},{"location":"pom-introduction/#example","title":"Example","text":"<p>In this example, we will create a page object class for the Google search page. The page object class will contain methods for interacting with the search page, such as entering a search query and clicking the search button. We will then write a test class that uses the page object class to perform a search on the Google search page.</p> Page Object ClassTest ClassExplanation <pre><code>using OpenQA.Selenium;\nusing OpenQA.Selenium.Support.UI;\n\nnamespace PageObjectModel\n{\n    public class GoogleSearchPage\n    {\n        private IWebDriver driver;\n        private By searchBox = By.Name(\"q\");\n        private By searchButton = By.Name(\"btnK\");\n\n        public GoogleSearchPage(IWebDriver driver)\n        {\n            this.driver = driver;\n        }\n\n        public void EnterSearchQuery(string query)\n        {\n            driver.FindElement(searchBox).SendKeys(query);\n        }\n\n        public void ClickSearchButton()\n        {\n            driver.FindElement(searchButton).Click();\n        }\n\n        public void WaitForSearchResults()\n        {\n            WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));\n            wait.Until(ExpectedConditions.ElementIsVisible(By.Id(\"result-stats\")));\n        }\n    }\n}\n</code></pre> <pre><code>using OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\nusing OpenQA.Selenium.Support.UI;\nusing System;\n\nnamespace PageObjectModel\n{\n    [TestFixture]\n    public class GoogleSearch\n    {\n        [SetUp]\n        public void SetUp()\n        {\n            IWebDriver driver = new ChromeDriver();\n            driver.Navigate().GoToUrl(\"https://www.google.com\");\n        }\n\n        [Test]\n        public void GoogleSearch_Test()\n        {\n            GoogleSearchPage searchPage = new GoogleSearchPage(driver);\n            searchPage.EnterSearchQuery(\"Selenium\");\n            searchPage.ClickSearchButton();\n            searchPage.WaitForSearchResults();\n        }\n\n        [CleanUp]\n        public void CleanUp()\n        {\n            driver.Quit();\n        }\n    }\n}\n</code></pre> <ol> <li>The <code>GoogleSearchPage</code> class is a page object class that represents the Google search page.</li> <li>The class has a constructor that takes an <code>IWebDriver</code> object as a parameter. This allows the page object class to interact with the browser.</li> <li>The class has methods for interacting with the search page, such as entering a search query, clicking the search button, and waiting for the search results to load.</li> <li>The <code>searchBox</code> and <code>searchButton</code> fields are <code>By</code> objects that represent the search box and search button elements on the page.</li> <li>The <code>EnterSearchQuery</code> method enters a search query into the search box.</li> <li>The <code>ClickSearchButton</code> method clicks the search button.</li> <li>The <code>WaitForSearchResults</code> method waits for the search results to load by waiting for the <code>result-stats</code> element to be visible.</li> <li>The <code>GoogleSearch</code> class is a test class that uses the <code>GoogleSearchPage</code> class to perform a search on the Google search page.</li> <li>The <code>SetUp</code> method creates a new <code>ChromeDriver</code> instance and navigates to the Google search page.</li> <li>The <code>GoogleSearch_Test</code> method creates a new <code>GoogleSearchPage</code> instance and performs a search for \"Selenium\".</li> <li>The <code>CleanUp</code> method quits the browser after the test has finished running.</li> </ol>"},{"location":"prerequisites/","title":"Prerequisites","text":"<p>Before starting, ensure you have the following:</p>"},{"location":"prerequisites/#visual-studio-2022-or-later","title":"Visual Studio 2022 or later","text":"<ul> <li>You can use the free Community edition of Visual Studio.</li> <li>Make sure to install the .NET Desktop Development workload.</li> </ul>"},{"location":"prerequisites/#net-8-sdk","title":".NET 8 SDK","text":"<ul> <li>Make sure to install the .NET 8 SDK to build and run this project.</li> <li>You can verify the installation by running <code>dotnet --version</code> in your terminal to ensure it outputs a version number starting with 8.</li> </ul>"},{"location":"prerequisites/#git","title":"Git","text":"<ul> <li>You can verify the installation by running <code>git --version</code> in your terminal to ensure it outputs a version number.</li> <li>You can use the command line or a GUI like GitHub Desktop or use the integrated git support in Visual Studio 2022.</li> <li>For more information on using Git, see using git section or refer to the official documentation.</li> </ul>"},{"location":"prerequisites/#others","title":"Others","text":"<ul> <li>Basic knowledge of C#, refer to this C# Programming Guide if needed.</li> <li>NuGet packages for Selenium WebDriver and NUnit (included in the project).</li> </ul>"},{"location":"project-structure/","title":"Project Structure","text":"<p>The project structure is subject to change, refer to the latest source for more up-to-date structure. It is organized to separate test logic from page object definitions. Below is a generalized representation of project structure:</p> Folder Structure <pre><code>.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 HR Modules\n    \u251c\u2500\u2500 Common_Modules\n    \u251c\u2500\u2500 Downloads\n    \u251c\u2500\u2500 Environment_URLs\n    \u2502   \u251c\u2500\u2500 endpoints-config.json\n    \u2502   \u251c\u2500\u2500 env-config.json\n    \u2502   \u251c\u2500\u2500 Environment.cs\n    \u2502   \u2514\u2500\u2500 URLs.cs\n    \u251c\u2500\u2500 PageObjects\n    \u2502   \u251c\u2500\u2500 LoginPage.cs\n    \u2502   \u251c\u2500\u2500 OnboardPage.cs\n    \u2502   \u251c\u2500\u2500 SettingsPage.cs\n    \u2502   \u251c\u2500\u2500 TimesheetPage.cs\n    \u2502   \u251c\u2500\u2500 &lt;Module&gt;\n    \u2502   \u2502   \u251c\u2500\u2500 &lt;PageName&gt;Page.cs\n    \u2502   \u2502   \u2514\u2500\u2500 etc.,\n    \u2502   \u2514\u2500\u2500 etc.,\n    \u251c\u2500\u2500 Reports\n    \u2502   \u251c\u2500\u2500 Report &lt;dd_MMM_yyy&gt;\n    \u2502   \u2502   \u251c\u2500\u2500 Screenshots\n    \u2502   \u2502   \u2502   \u251c\u2500\u2500 Screenshot_&lt;H_mm_ss&gt;.png\n    \u2502   \u2502   \u2502   \u2514\u2500\u2500 etc.,\n    \u2502   \u2502   \u251c\u2500\u2500 ExtentReport - &lt;dd_MMM_yy - hh_mm&gt;.html\n    \u2502   \u2502   \u2514\u2500\u2500 etc.,\n    \u2502   \u2514\u2500\u2500 etc.,\n    \u251c\u2500\u2500 TestData\n    \u2502   \u2502\u2500\u2500 Files\n    \u2502   \u2502   \u251c\u2500\u2500 SampleDoc.pdf\n    \u2502   \u2502   \u251c\u2500\u2500 Section3SampleDoc.jpg\n    \u2502   \u2502   \u2514\u2500\u2500 etc.,\n    \u2502   \u2502\u2500\u2500 LoginCredentials\n    \u2502   \u2502   \u251c\u2500\u2500 creds.json\n    \u2502   \u2502   \u2514\u2500\u2500 LoginCreds.cs\n    \u2502   \u2502\u2500\u2500 RandomNameGenerator\n    \u2502   \u2502   \u251c\u2500\u2500 names.json\n    \u2502   \u2502   \u2514\u2500\u2500 RandomEmployeeDetailsGenerator.cs\n    \u2502   \u251c\u2500\u2500 &lt;TestName&gt;_TestData.cs\n    \u2502   \u2514\u2500\u2500 etc.,\n    \u251c\u2500\u2500 TestPlans\n    \u2502   \u251c\u2500\u2500 &lt;TestModule&gt;\n    \u2502   \u2502   \u251c\u2500\u2500 &lt;TestName&gt;.cs\n    \u2502   \u2502   \u2514\u2500\u2500 etc.,\n    \u2502   \u2514\u2500\u2500 etc.,\n    \u251c\u2500\u2500 Utilities\n    \u2502   \u251c\u2500\u2500 RandomLcaGenerator\n    \u2502   \u2502   \u251c\u2500\u2500 LcaPdfFormMapper.cs\n    \u2502   \u2502   \u251c\u2500\u2500 LcaPdfFormStructure.cs\n    \u2502   \u2502   \u2514\u2500\u2500 RandomLcaDetailsGenerator.cs\n    \u2502   \u251c\u2500\u2500 AttributeExtensions.cs\n    \u2502   \u251c\u2500\u2500 BrowserOptions.cs\n    \u2502   \u251c\u2500\u2500 ExcelHelper.cs\n    \u2502   \u251c\u2500\u2500 ExcludeLeaveCalculation.cs\n    \u2502   \u251c\u2500\u2500 PdfHelper.cs\n    \u2502   \u251c\u2500\u2500 ReportsGenerationClass.cs\n    \u2502   \u251c\u2500\u2500 SoftAssertion.cs\n    \u2502   \u251c\u2500\u2500 TestExecutionHelper.cs\n    \u2502   \u251c\u2500\u2500 WaitHelpers.cs\n    \u2502   \u2514\u2500\u2500 WebElementExtensions.cs\n    \u251c\u2500\u2500 WebInteractions\n    \u2502   \u251c\u2500\u2500 I983Interactions.cs\n    \u2502   \u251c\u2500\u2500 I9Interactions.cs\n    \u2502   \u251c\u2500\u2500 LCAInteractions.cs\n    \u2502   \u251c\u2500\u2500 ProjectInteractions.cs\n    \u2502   \u251c\u2500\u2500 SignRequestInteractions.cs\n    \u2502   \u2514\u2500\u2500 TimesheetInteractions.cs\n    \u2502\u2500\u2500 HR Modules.csproj\n    \u2514\u2500\u2500 HR Modules.sln\n</code></pre>"},{"location":"reports-generation-class/","title":"ReportsGenerationClass","text":"<p>This abstract class is used to generate the test reports, it is inherited by <code>TestExecutionHelper</code>. It uses the <code>ExtentReports</code> library to generate the reports. The reports are generated in the <code>Reports</code> folder in the project directory.</p> <p>Below are the methods in the <code>ReportsGenerationClass</code> used to generate the reports:</p>"},{"location":"reports-generation-class/#members","title":"Members","text":""},{"location":"reports-generation-class/#setextenttest","title":"SetExtentTest","text":"<p>Sets the name for the current test instance - <code>ExtentTest</code> in the current <code>ExtentReport</code> instance.</p> Method SignatureParametersFunctionality <pre><code>public static void SetExtentTest(string name)\n</code></pre> Name Type Description <code>name</code> <code>string</code> The name of the test instance. <ol> <li>Set Test Name:<ul> <li>Sets the name of the current test instance in the report to the provided <code>name</code>.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#getextenttest","title":"GetExtentTest","text":"<p>Returns the instance of the <code>ExtentTest</code>.</p> Method SignatureReturnsFuntionality <pre><code>public static ExtentTest GetExtentTest()\n</code></pre> <p><code>ExtentTest</code>: The instance of the <code>ExtentTest</code>.</p> <ol> <li>Return Test Instance:<ul> <li>Returns the <code>_test</code> field, which is an instance of <code>ExtentTest</code>.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#getextentreport","title":"GetExtentReport","text":"<p>Returns the instance of the <code>ExtentReport</code>.</p> Method SignatureReturnsFunctionality <pre><code>public static ExtentReports GetExtentReport()\n</code></pre> <p><code>ExtentReports</code>: The instance of the <code>ExtentReports</code>.</p> <ol> <li>Return Report Instance:<ul> <li>Returns the <code>_extent</code> field, which is an instance of <code>ExtentReports</code>.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#getdrivers","title":"GetDrivers","text":"<p>Returns the list of driver instances of <code>WebDriver</code> for the current test.</p> Method SignatureReturnsFunctionality <pre><code>public static List&lt;IWebDriver&gt; GetDrivers()\n</code></pre> <p><code>List&lt;IWebDriver&gt;</code>: The list of driver instances.</p> <ol> <li>Return Drivers List:<ul> <li>Returns the <code>drivers</code> list, which contains instances of <code>IWebDriver</code>.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#getmethodbyname","title":"GetMethodByName","text":"<p>Gets a <code>MethodInfo</code> instance of the method by its name. Used in BeforeTest when the test method has a <code>TestCaseSourceAttribute</code></p> Method SignatureParametersReturnsFunctionality <pre><code>public static MethodInfo GetMethodByName(string methodName)\n</code></pre> Name Type Description <code>methodName</code> <code>string</code> The name of the method to retrieve. <p><code>MethodInfo</code>: The <code>MethodInfo</code> object representing the method, or <code>null</code> if the method is not found.</p> <ol> <li>Get Executing Assembly:<ul> <li>Retrieves the currently executing assembly using <code>Assembly.GetExecutingAssembly()</code>.</li> </ul> </li> <li>Get All Types:<ul> <li>Gets all types defined in the executing assembly using <code>executingAssembly.GetTypes()</code>.</li> </ul> </li> <li>Find Method by Name:<ul> <li>Iterates through each type to find a method with the specified name using <code>type.GetMethod(methodName)</code>.</li> <li>If the method is found, returns the corresponding <code>MethodInfo</code> object.</li> </ul> </li> <li>Return Null if Not Found:<ul> <li>If no method with the specified name is found, returns <code>null</code>.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#exportfaileddetails","title":"ExportFailedDetails","text":"<p>Exports the failed test details to the report and log the status accordingly when the test either fails or is skipped.</p> Method SignatureFunctionality <pre><code>public static void ExportFailedDetails()\n</code></pre> <ol> <li>Get Test Status:<ul> <li>Retrieves the current test status from <code>TestContext.CurrentContext.Result.Outcome.Status</code>.</li> </ul> </li> <li>Handle Failed Tests:<ul> <li>If the test status is <code>TestStatus.Failed</code>:<ul> <li>Captures the current date and time.</li> <li>Generates a screenshot filename and captures a screenshot in base64 format.</li> <li>Creates a node in the report for failed details and network calls.</li> <li>Logs the failure details, including the method name, exception message, and stack trace.</li> <li>Logs relevant network call messages.</li> <li>Adds the screenshot and the URL before failure to the report.</li> </ul> </li> </ul> </li> <li>Handle Skipped Tests:<ul> <li>If the test status is <code>TestStatus.Skipped</code>:<ul> <li>Creates a node in the report for skipped details.</li> <li>Logs the reason for skipping, including the test name and exception message.</li> </ul> </li> </ul> </li> </ol>"},{"location":"reports-generation-class/#resetsubsteps","title":"ResetSubsteps","text":"<p>Resets or clears the substeps dictionary in the report.</p> Method SignatureFunctionality <pre><code>public static void ResetSubsteps()\n</code></pre> <ol> <li>Clear Substeps:<ul> <li>Clears the <code>_substepNodes</code> dictionary.</li> </ul> </li> <li>Clear Substep Count:<ul> <li>Clears the <code>_substepCounts</code> dictionary.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#flush","title":"Flush","text":"<p>Writes/updates the test information of your reporter to the destination type.</p> Method SignatureFuntionality <pre><code>public static void Flush()\n</code></pre> <ol> <li>Flush Report:<ul> <li>Calls <code>_extent.Flush()</code> to write/update the test information of the reporter to the destination type.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#setdriver","title":"SetDriver","text":"<p>Sets the driver instance of <code>WebDriver</code> for the current test and add the current driver to the list of drivers in case of multiple driver instances for a single test.</p> Method SignatureParametersReturnsFunctionality <pre><code>public static IWebDriver SetDriver(IWebDriver driver)\n</code></pre> Name Type Description <code>driver</code> <code>IWebDriver</code> The web driver instance to be set. <p><code>IWebDriver</code>: The updated web driver instance.</p> <ol> <li>Set Current Driver:<ul> <li>Assigns the provided <code>driver</code> to the <code>_driver</code> field.</li> </ul> </li> <li>Add to Drivers List:<ul> <li>Adds <code>_driver</code> to the <code>drivers</code> list.</li> </ul> </li> <li>Return Driver:<ul> <li>Returns the updated <code>_driver</code> instance.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#setup","title":"SetUp","text":"<p>Uses <code>OneTimeSetUp</code> attribute which runs this method once before all test methods in a test class. And this method adds all the necessary information of the current tests to the report.</p> Method SignatureFunctionality <pre><code>[OneTimeSetUp]\nprotected void SetUp()\n</code></pre> <ol> <li>Initialize Web Drivers:<ul> <li>Initializes <code>drivers</code> with a list containing <code>_driver</code>.</li> </ul> </li> <li>Set Trigger Source Information:<ul> <li>Constructs <code>triggerSourceText</code> using the current test name.</li> <li>Retrieves <code>triggerSource</code> from the Environment.</li> <li>Adds system information to the extent report based on the value of triggerSource:<ul> <li>\"Manual\" if <code>triggerSource</code> is \"MANUAL\".</li> <li>\"Hosted Agent Pipeline\" if <code>triggerSource</code> is \"PIPELINE\".</li> <li>\"Unknown\" if <code>triggerSource</code> is null or empty.</li> </ul> </li> </ul> </li> <li>Set Test Environment Information:<ul> <li>Adds system information to the extent report about the test environment using <code>Environment.Name</code> and <code>URLs.Instance.Login_URL</code>.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#beforetest","title":"BeforeTest","text":"<p>Uses <code>OneTimeSetUp</code> attribute which runs this method once before all test methods in a test class. And this method handles the creation of a new test instance in the report along with output to console saying <code>Started Test: &lt;TestMethodName&gt; at &lt;CurrentDateTime&gt;</code> or <code>Retrying Test(s) at &lt;CurrentDateTime&gt;</code></p> Method SignatureFunctionality <pre><code>[OneTimeSetUp]\nprotected void BeforeTest()\n</code></pre> <ol> <li>Set Test Name:<ul> <li>Creates a new test instance in the report using <code>ExtentTest</code> and sets the test name to the current test method name (unless the test has a TestCaseSourceAttribute, in which case it uses the SetExtentTest method to set a custom name for each test case).</li> <li>Logs the start/retry of the test with the test name and start time to the console.</li> <li>Assigns the test instance to the <code>_test</code> field.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#aftertest","title":"AfterTest","text":"<p>Uses <code>OneTimeTearDown</code> attribute which runs this method once after all test methods in a test class. And this method handles the cleaning up of resources along with output to console saying <code>Ended Test: &lt;TestMethodName&gt; at &lt;CurrentDateTime&gt; with status &lt;TestStatus&gt;, ran for duration : &lt;TestDuration&gt;</code></p> Method SignatureFunctionality <pre><code>[OneTimeTearDown]\nprotected void AfterTest()\n</code></pre> <ol> <li>Get Test Status:     <ul> <li>Retrieves the test status from the <code>TestContext.CurrentContext.Result.Outcome.Status</code> property.</li> <li>If the test status is <code>Skipped</code>, logs the test status and duration.</li> <li>If the test status is <code>Failed</code>, logs the test status, duration, and exception message.</li> <li>If the test status is <code>Passed</code>, logs the test status and duration.</li> </ul> </li> <li>Export Failed Details:<ul> <li>Exports the failed test details to the report and logs the status accordingly when Test has either <code>Failed</code> or <code>Skipped</code>.</li> </ul> </li> <li>Reset/Clean Up Resources:<ul> <li>Calls <code>ResetSubsteps</code> to clear the substeps dictionary in the current report.</li> <li>Calls <code>Flush</code> to write/update the test information of the reporter to the destination type.</li> <li>Closes and quits all the driver instances in the current test and clears the list of drivers.</li> <li>Clears the list of errors in the <code>SoftAssertion</code> instance.</li> <li>Logs the end of the test with the test status, duration, and end time to the console.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#capture","title":"Capture","text":"<p>Captures the screenshot of the current page and adds it to the report in base64 format.</p> Method SignatureParametersReturnsFunctionality <pre><code>public static void Capture(IWebDriver driver, string screenShotName, string today)\n</code></pre> Name Type Description <code>driver</code> <code>IWebDriver</code> The web driver instance. <code>screenShotName</code> <code>string</code> The name of the screenshot. <code>today</code> <code>string</code> The current date. <p><code>string</code>: base64 string of the screenshot.</p> <ol> <li>Capture Screenshot:<ul> <li>Captures a screenshot of the current page using <code>driver.TakeScreenshot()</code>.</li> </ul> </li> <li>Save Screenshot:<ul> <li>Saves the screenshot to the <code>Reports</code> folder with a subdirectory from <code>Report today</code> the filename format <code>screenShotName.png</code>.</li> </ul> </li> <li>Return Screenshot Path:<ul> <li>Returns the path of the saved screenshot.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#logreport","title":"LogReport","text":"<p>Logs the message to the report with status Pass. Will be deprecated in a future version.</p> Method SignatureParametersFunctionality <pre><code>public void LogReport(string message)\n</code></pre> Name Type Description <code>message</code> <code>string</code> The message to log. <ol> <li>Log Message:<ul> <li>Logs the message to the report with status <code>Pass</code>.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#loginfo","title":"LogInfo","text":"<p>Logs the message to the report with status Info. Will be deprecated a in a future version.</p> Method SignatureParametersFunctionality <pre><code>public void LogInfo(string message)\n</code></pre> Name Type Description <code>message</code> <code>string</code> The message to log. <ol> <li>Log Message:<ul> <li>Logs the message to the report with status <code>Info</code>.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#logerror","title":"LogError","text":"<p>Logs the error messages from SoftAssertion to the console and to the report in a markup helper.</p> Method SignatureParametersFunctionality <pre><code>public void LogError(ExtentTest extentTest, string errorMessage)\n</code></pre> Name Type Description <code>extentTest</code> <code>ExtentTest</code> The extent test instance to log the error message. <code>errorMessage</code> <code>string</code> The error message to log. <ol> <li>Log Error Message:<ul> <li>Logs the error message to the console using <code>Console.WriteLine</code>.</li> </ul> </li> <li>Log Error to Report:<ol> <li>Markup Helper:<ul> <li>Uses <code>MarkupHelper.CreateCodeBlock</code> to create a code block with the error message(s).</li> </ul> </li> <li>Assertion Failures Node:<ul> <li>Creates a new node in <code>ExtentTest</code> instance with the name \"Assertion Failures\".</li> <li>Attaches the <code>MarkupHelper</code> to the \"Assertion Failures\" node and shows the failures in <code>Status.Info</code>.</li> </ul> </li> </ol> </li> </ol>"},{"location":"reports-generation-class/#getorcreatenode","title":"GetOrCreateNode","text":"<p>Retrieves an existing <code>ExtentTest</code> node by name or creates a new one as a child of the specified parent node if it does not exist.</p> Method SignatureParamtersReturnsFunctionality <pre><code>private static ExtentTest GetOrCreateNode(string nodeName, ExtentTest parentNode)\n</code></pre> Name Type Description <code>nodeName</code> <code>string</code> The name of the node to retrieve or create. <code>parentNode</code> <code>ExtentTest</code> The parent node for the new node. <p><code>ExtentTest</code>: The existing or newly created <code>ExtentTest</code> node.</p> <ol> <li>Check for Existing Node:<ul> <li>Checks if <code>_substepNodes</code> contains an entry for <code>nodeName</code>.</li> </ul> </li> <li>Return Existing Node:<ul> <li>If an entry exists, returns the existing <code>ExtentTest</code> node from <code>_substepNodes</code>.</li> </ul> </li> <li>Create New Node:<ul> <li>If no entry exists, creates a new <code>ExtentTest</code> node as a child of <code>parentNode</code> using <code>parentNode.CreateNode(nodeName)</code>.</li> <li>Adds the newly created node to <code>_substepNodes</code>.</li> </ul> </li> <li>Return New Node:<ul> <li>Returns the newly created <code>ExtentTest</code> node.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#logsubstep","title":"LogSubstep","text":"<p>The <code>LogSubstep</code> method logs details about a substep in a test to the specified node, capturing a screenshot if the substep fails.</p> Method SignatureParamtersFunctionality <pre><code>public void LogSubstep(string nodeName, string stepDetails, Status stepStatus? = null, string ssTitle = null, IWebDriver driver = null, string parentNodeName = null)\n</code></pre> Name Type Description <code>nodeName</code> <code>string</code> The name of the substep node. <code>stepDetails</code> <code>string</code> A description of the substep. <code>stepStatus</code> <code>Status?</code> The status of the substep. Default is <code>Status.Pass</code>. <code>ssTitle</code> <code>string</code> The title for the screenshot. <code>driver</code> <code>IWebDriver</code> The web driver instance. Default is <code>_driver</code>. <code>parentNodeName</code> <code>string</code> The name of the parent node. Default is <code>_test</code>. <ol> <li>Node and Parent Node Handling:<ul> <li>Determines the parent node (either <code>_test</code> or <code>parentNodeName</code>).</li> <li>Retrieves or creates the substep node (<code>nodeName</code>).</li> </ul> </li> <li>Substep Count Management:<ul> <li>Initializes or increments the substep count for <code>nodeName</code>.</li> </ul> </li> <li>Logging:<ul> <li>Logs the substep details with the status and a step label (e.g., \"Step - X: \").</li> </ul> </li> <li>Screenshot Capture:<ul> <li>If the substep status is neither <code>Pass</code> nor <code>Skip</code>, captures a screenshot using <code>driver</code> and adds it to the log entry.</li> </ul> </li> </ol> <p>This method provides systematic logging of substeps, ensuring each is recorded with specific details and an optional screenshot on failure.</p>"},{"location":"reports-generation-class/#getreportpath","title":"GetReportPath","text":"<p>The <code>GetReportPath</code> method generates a path for a report to be saved, ensuring necessary directories are created.</p> Method SignatureReturnsFunctionality <pre><code>public static string GetReportPath()\n</code></pre> <p><code>string</code>: The current report path in the format <code>\\\\Reports\\\\Report dd_MM_yyyy\\\\ExtentReport - d_MMM_yy - H_mm.html</code>.</p> <ol> <li> <p>Retrieve Current Directory:</p> <ul> <li>Gets the current directory using <code>Directory.GetCurrentDirectory()</code>.</li> </ul> </li> <li> <p>Determine Project Path:</p> <ul> <li>Constructs the project path by navigating up three levels from the current directory.</li> </ul> </li> <li> <p>Create Report Folder:</p> <ul> <li>Constructs the path for the <code>Reports</code> folder and ensures it is created using <code>Directory.CreateDirectory()</code>.</li> </ul> </li> <li> <p>Create Date-Specific Report Folder:</p> <ul> <li>Constructs a date-specific folder path within the <code>Reports</code> folder and ensures it is created.</li> </ul> </li> <li> <p>Generate Report Path:</p> <ul> <li>Constructs the report file path with a timestamp, ensuring it follows the format <code>ExtentReport - d_MMM_yy - H_mm.html</code>.</li> </ul> </li> <li> <p>Return Report Path:</p> <ul> <li>Returns the constructed report path.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#assignauthor","title":"AssignAuthor","text":"<p>The <code>AssignAuthor</code> method assigns the author name to the current test case.</p> Method SignatureParametersFunctionality <pre><code>public void AssignAuthor(string authorName)\n</code></pre> Name Type Description <code>authorName</code> <code>string</code> The author of the current test. <ol> <li>Assign Author:<ul> <li>Assigns the provided author name to the current test using <code>_test.AssignAuthor(authorName)</code>.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#switchbrowser","title":"SwitchBrowser","text":"<p>The <code>SwitchBrowser</code> method switches the browser window to the specified window handle using webdriver instance in case of multiple webdriver instances.</p> Method SignatureParametersFunctionality <pre><code>public void SwitchBrowser(IWebDriver driver)\n</code></pre> Name Type Description <code>driver</code> <code>IWebDriver</code> The driver to switch to. <ol> <li>Switch Browser:<ul> <li>Uses <code>driver.SwitchTo().Window(driver.CurrentWindowHandle)</code> to switch to the specified browser window.</li> </ul> </li> </ol>"},{"location":"reports-generation-class/#getnetworkcalls","title":"GetNetworkCalls","text":"<p>The <code>GetNetworkCalls</code> method retrieves and processes browser log entries, logging any failed network calls that meet specific criteria.</p> Method SignatureParametersFunctionality <pre><code>protected void GetNetworkCalls(string nodeName = null)\n</code></pre> Name Type Description <code>nodeName</code> <code>string</code> The name of the node for logging substeps. Default is <code>null</code>. <ol> <li> <p>Retrieve Browser Logs:</p> <ul> <li>Retrieves the browser logs using <code>_driver.Manage().Logs.GetLog(LogType.Browser)</code>.</li> </ul> </li> <li> <p>Process and Filter Logs:</p> <ul> <li>Iterates through each log entry.</li> <li>Checks if the log message contains the word \"Failed\" and does not contain \"mailhog\" or \"help.onblick\".</li> </ul> </li> <li> <p>Log Relevant Entries:</p> <ul> <li>If a log entry meets the criteria, writes the error message to <code>TestContext.Progress</code> and logs it as a substep using <code>LogSubstep(nodeName, log.Message, Status.Info)</code>.</li> </ul> </li> </ol> <p>Gets only failed network calls and is invoked when a test has failed.</p>"},{"location":"reports-generation-class/#getallnetworkcalls","title":"GetAllNetworkCalls","text":"<p>The <code>GetAllNetworkCalls</code> method retrieves and processes all browser log entries after ensuring there are no pending requests, logging any network calls that meet specific criteria.</p> Method SignatureParametersFunctionality <pre><code>protected void GetAllNetworkCalls(string nodeName = null)\n</code></pre> Name Type Description <code>nodeName</code> <code>string</code> The name of the node for logging substeps. Default is <code>null</code>. <ol> <li> <p>Wait for No Pending Requests:</p> <ul> <li>Calls <code>WaitForNoPendingRequests(_driver, 100)</code> to ensure there are no pending requests.</li> </ul> </li> <li> <p>Retrieve Browser Logs:</p> <ul> <li>Retrieves the browser logs using <code>_driver.Manage().Logs.GetLog(LogType.Browser)</code>.</li> </ul> </li> <li> <p>Process and Filter Logs:</p> <ul> <li>Iterates through each log entry.</li> <li>Checks if the log message does not contain \"mailhog\" or \"help.onblick\".</li> </ul> </li> <li> <p>Log Relevant Entries:</p> <ul> <li>If a log entry meets the criteria, writes the error message to <code>TestContext.Progress</code> and logs it as a substep using <code>LogSubstep(nodeName, log.Message)</code>.</li> </ul> </li> </ol> <p>Note: This method is not used as of now as <code>WaitForNoPendingRequests(_driver,100)</code> doesn't work as expected in onblick application</p>"},{"location":"reports/","title":"Generating Reports for Tests","text":"<p>We use the <code>ExtentReports</code> library to generate reports for our tests in the <code>Reports</code> directory. The reports are generated in HTML format and can be viewed in any browser.</p> <p>The <code>ExtentReports</code> library provides a simple API to create and manage reports. It also provides a way to log test steps and attach screenshots to the reports.</p>"},{"location":"reports/#adding-extentreports-to-the-project","title":"Adding ExtentReports to the Project","text":"<p>To add the <code>ExtentReports</code> NuGet package to the project, run the following command in the terminal:</p> <pre><code>dotnet add package ExtentReports\n</code></pre> <p>Note: This part is already done and you don't have to do it again.</p>"},{"location":"reports/#creating-a-report","title":"Creating a Report","text":"<p>To create a report, we need to create an instance of the <code>ExtentReports</code> class. We also need to create an instance of the <code>ExtentTest</code> class for each test case.</p> <p>Here is an example of how to create a report:</p> Example <pre><code>using AventStack.ExtentReports;\nusing AventStack.ExtentReports.Reporter;\n\nnamespace ExtentReportsDemo\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Create an instance of ExtentReports\n            var extent = new ExtentReports();\n\n            // Create an instance of ExtentHtmlReporter and attach it to the ExtentReports\n            var htmlReporter = new ExtentHtmlReporter(\"Reports\\\\TestReport.html\");\n            extent.AttachReporter(htmlReporter);\n\n            // Create a test\n            var test = extent.CreateTest(\"TestName\");\n\n            // Log test steps\n            test.Log(Status.Pass, \"Step 1\");\n            test.Log(Status.Pass, \"Step 2\");\n\n            // End the test\n            extent.Flush();\n        }\n    }\n}\n</code></pre> <p>Note: This is just an example of how to use the <code>ExtentReports</code> library, all of this is already configured in <code>ReportsGenerationClass</code> and <code>TestExecutionHelper</code></p>"},{"location":"reports/#using-pre-built-classes-to-generate-reports","title":"Using pre-built classes to Generate Reports","text":"<p>We have created a class called <code>ReportsGenerationClass</code> that generates reports for the tests. This class uses the <code>ExtentReports</code> library to create and manage reports.</p> <p>The <code>ReportsGenerationClass</code> class is inherited by the <code>TestExecutionHelper</code> which is in-turn inherited by all the tests.</p>"},{"location":"reports/#using-executestep-method","title":"Using <code>ExecuteStep</code> method","text":"<p>The <code>ExecuteStep</code> method is used to log test steps in the report. (Use the <code>ExecuteStep</code> method which uses dictionary as the other overload method shall be removed in a future version.)</p> <p>Let's consider our current step in the test is to login using the <code>Login</code> method. We can log this step in the report using the <code>ExecuteStep</code> method as shown below:</p> ExecuteStepDictionary <pre><code>ExecuteStep(() =&gt; Login(username, password), \"Login\", steps);\n</code></pre> <pre><code>Dictionary&lt;string, NodeDetails&gt; steps = new Dictionary&lt;string, NodeDetails&gt;()\n{\n    { \"Login\", new NodeDetails( nodeName: \"Login\", stepDetails: \"Login to the application\" } }\n};\n</code></pre> <p>Now, what the above method invocation would do is log the step \"Login\" in the report with the description \"Login to the application\" when the entire <code>Login()</code> method has finished executing. So, it'll essentially only log two steps one at the beginning of the method invocation and one at the end of its execution. To log any steps in between, we're going to pass the current <code>nodeName</code> inside our test step method and use the <code>LogSubstep</code> method to log the substeps.</p>"},{"location":"reports/#using-logsubstep-method","title":"Using <code>LogSubstep</code> method","text":"<p>The <code>LogSubstep</code> method is used to log substeps in the report. This method is used to log the steps that are part of a test step.</p> <p>Using the above example, let's consider that the <code>Login</code> method has the following steps:</p> <ol> <li>Enter username</li> <li>Enter password</li> <li>Click on the login button</li> <li>Verify the login</li> </ol> <p>We can log these steps in the report using the <code>LogSubstep</code> method and also modify the <code>Test Method</code> as shown below:</p> Login MethodTest Method <pre><code>public void Login(string username, string password, string nodeName)\n{\n    driver.FindElement(By.Id(\"username\")).SendKeys(username);\n    LogSubstep(nodeName: \"Enter username\", stepDetails: $\"Entered username - {username}\", parentNodeName:nodeName);\n    driver.FindElement(By.Id(\"password\")).SendKeys(password);\n    LogSubstep(nodeName: \"Enter password\", stepDetails: $\"Entered password - {password}\", parentNodeName:nodeName);\n    driver.FindElement(By.Id(\"login\")).Click();\n    LogSubstep(nodeName: \"Click on the login button\", stepDetails: \"Clicked on the login button\", parentNodeName:nodeName);\n    Assert.IsTrue(driver.FindElement(By.Id(\"welcome\")).Text.Contains(\"Welcome\"));\n    LogSubstep(nodeName: \"Verify the login\", stepDetails: \"Verified the login\", parentNodeName:nodeName);\n}\n</code></pre> <pre><code>ExecuteStep(() =&gt; Login(\"admin\", \"admin123\", \"Login\"), \"Login\", steps);\n</code></pre> <p>So, the above method invocation would log the steps \"Enter username\", \"Enter password\", \"Click on the login button\", and \"Verify the login\" in the report with the description provided when the respective step is executed.</p>"},{"location":"reports/#viewing-the-report","title":"Viewing the Report","text":"<p>The reports are generated in the <code>Reports</code> directory. To view the report, open the <code>Reports\\Report dd_MM_yyyy</code> folder and open the <code>ExtentReport - dd_MMM_yy - hh_mm.html</code> file in a browser.</p> <p>The report contains the following information:</p> <ol> <li>Test name</li> <li>Test status</li> <li>Test steps</li> <li>Test execution date and time</li> </ol>"},{"location":"reports/#good-practices","title":"Good Practices","text":"<ol> <li>Log all test steps: Log all the test steps in the report using the <code>ExecuteStep</code> and <code>LogSubstep</code> methods.</li> <li>Use meaningful step descriptions: Use meaningful step descriptions to make the report more informative.</li> <li>Use the <code>ExecuteStep</code> method: Use the <code>ExecuteStep</code> method to log the test steps in the report.</li> <li>Use the <code>LogSubstep</code> method: Use the <code>LogSubstep</code> method to log the substeps in the report.</li> <li>Use the <code>NodeDetails</code> class: Use the <code>NodeDetails</code> class to store the step details.</li> <li>Use the <code>Dictionary</code> class: Use the <code>Dictionary</code> class to store the test steps.</li> <li>Use typed variables: Use typed variables for step keys to ensure compile-time safety.</li> </ol>"},{"location":"reports/#report-example","title":"Report Example","text":"<p>Here is an example of a report generated by the <code>ExtentReports</code> library:</p> <p></p> <ul> <li>The top-left section shows the status of all tests in the current report.</li> <li>The top-right section shows the status of the test steps in all tests combined.</li> <li>The bottom section shows the details of each test, including the test name, status, and test steps.</li> <li>The test steps are color-coded based on their status (Pass, Fail, Fatal, Skip, Warning etc.,).</li> <li>The test steps can be expanded to view the details of each step.</li> </ul>"},{"location":"running-tests/","title":"Running Tests","text":"<p>Now that you've written your first test, let's run it. There are a couple ways you can run your test, one is using the <code>dotnet test</code> command in the CLI, and the other is using the Test Explorer in Visual Studio.</p>"},{"location":"running-tests/#how-to-run-tests","title":"How to Run Tests","text":"Using Test ExplorerThrough CLI <ol> <li>Open the Test Explorer by going to <code>Test</code> &gt; <code>Test Explorer</code> in the top menu.</li> <li>Click on the <code>Run All</code> button to run all the tests in the project.</li> <li>You can also run a single test by right-clicking on the test file and selecting <code>Run Tests</code>.     </li> </ol> <p><pre><code>dotnet test\n</code></pre> What this command will do is it will run all the tests in the current project. If you want to run a selected test, you can use the following command</p> <p><pre><code>dotnet test --filter FullyQualifiedName~TestName\n</code></pre> Example: if your namespace is <code>MyNamespace</code> and your test name is <code>MyTest</code>, you can run the test using the following command</p> <pre><code>dotnet test --filter FullyQualifiedName~MyNamespace.MyTest\n</code></pre>"},{"location":"running-tests/#viewing-test-results","title":"Viewing Test Results","text":"<ul> <li> <p>When you run your tests, you will see the output in the Test Explorer or in the CLI. The output will show you the status of each test, whether it passed or failed, and the time it took to run the test.</p> </li> <li> <p>If a test fails, the output will show you the reason for the failure, which will help you debug the issue.</p> </li> </ul> <p></p> <ul> <li>If all tests pass, you will see a green checkmark next to each test, indicating that the tests have passed successfully.</li> </ul> <p></p>"},{"location":"setting-up/","title":"Setting Up the Environment","text":""},{"location":"setting-up/#cloning-the-repository","title":"Cloning the Repository","text":"<p>To start working on the project, you need to clone the repository. You can do this using either the <code>git clone</code> command or the <code>Visual Studio</code> interface.</p> Using Visual StudioUsing Terminal <ol> <li>Open Visual Studio.</li> <li>Click on <code>Clone a repository</code>.</li> <li>Enter the repository URL <code>https://onblickrigaps.visualstudio.com/Automation/_git/Selenium2.0</code>.</li> <li>Click on <code>Clone</code>.</li> </ol> <pre><code>git clone https://onblickrigaps.visualstudio.com/Automation/_git/Selenium2.0\n</code></pre> <p>After cloning the repository, you are ready to proceed with the setup.</p>"},{"location":"setting-up/#configuring-the-test-environment","title":"Configuring the Test Environment","text":"<p>The environment in which tests run can be configured through the <code>Environment.cs</code> file. By default, the environment is set to <code>demo</code>.</p>"},{"location":"setting-up/#updating-the-environment-configuration","title":"Updating the Environment Configuration","text":"<p>To set a different environment for your tests, update the <code>Name</code> property in the <code>Environment.cs</code> file with the desired environment value.</p> Environment.cs <pre><code>public static string Name =&gt; System.Environment.GetEnvironmentVariable(\"ENVIRONMENT\") ?? \"demo\";\n</code></pre>"},{"location":"setting-up/#supported-environment-values","title":"Supported Environment Values","text":"<p>The following environment values are available: </p> Allowed values for Environment variable Value Description <code>demo</code> Demo environment for testing purposes. <code>prod</code> Production environment. <code>dev</code> General development environment. <code>dev1</code> First development environment. <code>dev2</code> Second development environment."},{"location":"setting-up/#setting-the-environment-variable","title":"Setting the Environment variable","text":"<p>To set the <code>ENVIRONMENT</code> variable, follow the instructions based on your operating system or pipeline configuration. This variable controls which environment the tests will execute against.</p> <p></p> <p>Ensure that the correct environment variable is set before running your tests to ensure they execute against the intended environment.</p>"},{"location":"settings-page/","title":"SettingsPage","text":"<p>The <code>SettingsPage</code> class contains locators and methods necessary to interact with the settings page.</p>"},{"location":"settings-page/#members","title":"Members","text":""},{"location":"settings-page/#locators","title":"Locators","text":"<p>The locators used in the <code>SettingsPage</code> class aren't disclosed here, you can go through the <code>SettingsPage.cs</code> file in the project to view the locators. All locator members are of two types <code>By</code> and <code>IWebElement</code>(using <code>PageObjectFactory</code>).</p>"},{"location":"settings-page/#methods","title":"Methods","text":"<p>There are a few methods in the <code>SettingsPage</code> class that are used to interact with the settings page. Some of the methods are private and some are public, italicized methods are private methods.</p>"},{"location":"settings-page/#checkaliases","title":"CheckAliases","text":"<p>The <code>CheckAliases</code> method is used to navigate to the company profile page, check for existing aliases, and add any new aliases that are not already present. This method ensures that all specified aliases are included in the company's profile. There are some methods which interact with the settings but are written in their corresponding <code>WebInteractions</code> class for modularity.</p> Method SignatureParametersFunctionalityUsage <pre><code>public void CheckAliases(string aliases)\n</code></pre> Name Type Description <code>aliases</code> <code>string</code> A comma-separated string containing the aliases to be checked and added to the company profile. <ol> <li>Navigate to Company Profile: Go to the company profile URL.</li> <li>Edit Company Profile: Click the edit button to enable editing of the company profile.</li> <li>Check and Add Aliases: Split the input string into an array of aliases. For each alias:<ul> <li>Check if the alias is already present in the list of existing aliases.</li> <li>If the alias is not present, add it to the list.</li> </ul> </li> <li>Save Changes: Click the update button to save the changes to the company profile.</li> <li>Confirm Update: Confirm the update by clicking the proceed button and wait for the update to complete.</li> </ol> <p>This method is used in the <code>LCA Parsing</code> test script to ensure that all required aliases are present in the company profile.</p> <pre><code>SettingsPage settingsPage = new SettingsPage();\nsettingsPage.CheckAliases(\"Alias1, Alias2, Alias3\");\n</code></pre>"},{"location":"settings-page/#validateshoworhidebtn","title":"ValidateShowOrHideBtn","text":"<p>The <code>ValidateShowOrHideBtn</code> method checks the functionality of \"show\" and \"hide\" password buttons in a web application. It validates that clicking these buttons correctly changes the password field's type attribute between \"password\" (hidden) and \"text\" (visible).</p> Method SignatureParametersFunctionalityUsage <pre><code>private void ValidateShowOrHideBtn(string passwordBox, string nodeName = null)\n</code></pre> Name Type Description <code>passwordBox</code> <code>string</code> The locator of the password input field. - \"New Password\" or \"Confirm Password\" <code>nodeName</code> <code>string</code> The name of the node to be shown on the Extent report. <ol> <li>Locate Elements:<ul> <li>Define locators for the input field, show button, and hide button.</li> </ul> </li> <li>Validate Initial State:<ul> <li>Wait for the password input field to be visible.</li> <li>Retrieve and assert the initial type of the input field to be \"password\".</li> </ul> </li> <li>Show Password:<ul> <li>Click the \"show password\" button.</li> <li>Assert that the password input field type changes to \"text\".</li> </ul> </li> <li>Hide Password:<ul> <li>Click the \"hide password\" button.</li> <li>Assert that the password input field type changes back to \"password\".</li> </ul> </li> </ol> <p>This method is used in the <code>ChangePassword</code> method to validate the functionality of the \"show\" and \"hide\" password buttons.</p> Example 1Example 2 <pre><code>SettingsPage settingsPage = new SettingsPage();\nsettingsPage.ValidateShowOrHideBtn(\"New Password\");\n</code></pre> <pre><code>SettingsPage settingsPage = new SettingsPage();\nsettingsPage.ValidateShowOrHideBtn(\"Confirm Password\");\n</code></pre>"},{"location":"settings-page/#changepassword","title":"ChangePassword","text":"<p>The ChangePassword method automates the process of changing a user's password. It includes steps for validating password guidelines, handling error messages, and ensuring that password requirements are met. This method uses the above <code>ValidateShowOrHideBtn</code></p> Method SignatureParametersFunctionality <pre><code>public void ChangePassword(string oldPassword, string newPassword, string nodeName = null)\n</code></pre> Name Type Description <code>oldPassword</code> <code>string</code> The current password of the user. <code>newPassword</code> <code>string</code> The new password to be set for the user. <code>nodeName</code> <code>string</code> The name of the node to be shown on the Extent report. Default is <code>null</code> <ol> <li>Navigate to Settings Page:<ul> <li>Navigate to the settings URL if the current URL does not match.</li> </ul> </li> <li>Validate Password Guidelines:<ul> <li>Hover over the password guidelines button.</li> <li>Ensure the tooltip contains specific text about password requirements and restrictions.</li> <li>Assert that the tooltip text matches the expected guidelines.</li> </ul> </li> <li>Attempt Save Without Data:<ul> <li>Click the \"Save\" button without entering any data.</li> <li>Collect and assert error messages related to missing input.</li> </ul> </li> <li>Test Error Messages for Incorrect Current Password:<ul> <li>Enter \"test\" into the current password field and verify the length requirement error.</li> <li>Replace \"test\" with the actual old password and validate the password field.</li> </ul> </li> <li>Validate Old and New Passwords:<ul> <li>Check error messages when old and new passwords are the same.</li> <li>Enter and validate the new password in the new password field.</li> </ul> </li> <li>Confirm New Password:<ul> <li>Check for error messages when new and confirm passwords do not match.</li> <li>Enter and validate the new password in the confirm password field.</li> </ul> </li> <li>Final Validation and Save:<ul> <li>Validate show/hide functionality for password fields.</li> <li>Click the \"Save\" button and verify successful saving through a success message.</li> </ul> </li> </ol>"},{"location":"shared-failure-context/","title":"SharedFailureContext","text":"<p>The shared failure context allows different failure handlers to share information, such as error messages.</p> <p>Below are the methods in <code>SharedFailureContext</code>:</p>"},{"location":"shared-failure-context/#methods","title":"Methods","text":""},{"location":"shared-failure-context/#initializeexceptiondetails","title":"InitializeExceptionDetails","text":"<p>Intializes the exception details in the shared failure context. It is used in <code>ExecuteStep</code> method in the catch block to initialize exception details after an exception was thrown.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static void InitializeExceptionDetails(Exception ex)\n</code></pre> Name Type Description <code>ex</code> <code>Exception</code> The exception that was thrown. <ol> <li>Capture Method Name:<ul> <li>Retrieves the name of the method where the exception was thrown using <code>TestContext.CurrentContext.Test.MethodName</code>.</li> <li>Assigns the method name to the <code>FailedMethodName</code> field.</li> </ul> </li> <li>Extract Exception Message:<ul> <li>Extracts the message from the exception <code>ex</code>.</li> <li>Assigns the message to the <code>ExceptionMessage</code> field.</li> </ul> </li> <li>Process Stack Trace:<ul> <li>Processes the stack trace of the exception using the <code>GetStacktraceFailedLines</code> method.</li> <li>Assigns the processed stack trace to the <code>StackTrace</code> field.</li> </ul> </li> </ol> <p>Used in the catch block of the <code>ExecuteStep</code> and <code>ExecuteStepAndSuppress</code> methods and also in <code>CustomRetryAttribute</code> to initialize the exception details in the shared failure context. <pre><code>SharedFailureContext.InitializeExceptionDetails(ex);\n</code></pre></p>"},{"location":"shared-failure-context/#resetexceptiondetails","title":"ResetExceptionDetails","text":"<p>Resets the exception details in the shared failure context. It is used in <code>ExecuteStepAndSuppress</code> method in the finally block to reset exception details after the step has been executed.</p> Method SignatureFunctionalityUsage <pre><code>public static void ResetExceptionDetails()\n</code></pre> <ol> <li>Reset Method Name:<ul> <li>Resets the <code>FailedMethodName</code> field to <code>null</code>.</li> </ul> </li> <li>Reset Exception Message:<ul> <li>Resets the <code>ExceptionMessage</code> field to <code>null</code>.</li> </ul> </li> <li>Reset Stack Trace:<ul> <li>Resets the <code>StackTrace</code> field to <code>null</code>.</li> </ul> </li> </ol> <p>Used in the catch block of the <code>ExecuteStepAndSuppress</code> method and also in <code>CleanUp</code> of some tests that use the <code>TestCaseSourceAttribute</code> to reset the exception details in the shared failure context. <pre><code>SharedFailureContext.ResetExceptionDetails();\n</code></pre></p>"},{"location":"shared-failure-context/#getstacktracefailedlines","title":"GetStacktraceFailedLines","text":"<p>Processes the stack trace of the exception to extract the failed lines. It is used in the <code>InitializeExceptionDetails</code> method.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static string GetStacktraceFailedLines(string stackTrace)\n</code></pre> Name Type Description <code>stackTrace</code> <code>string</code> The stack trace of the exception. <ol> <li>Split Stack Trace:<ul> <li>Splits the input <code>stackTrace</code> string into individual lines using <code>\\n</code> as the delimiter.</li> <li>Stores the resulting lines in an array <code>lines</code>.</li> </ul> </li> <li>Initialize Updated Stacktrace:<ul> <li>Initializes an empty string <code>updatedStacktrace</code> to store the processed stack trace lines.</li> </ul> </li> <li>Process Each Line:<ul> <li>Iterates through each line in the <code>lines</code> array.</li> <li>For each line, uses a regular expression to match the file name and line number.</li> <li>Regex Pattern: <code>@\"(?&lt;file&gt;[^\\\\]+\\.cs):line (?&lt;line&gt;\\d+)\"</code></li> <li>Match Groups:<ul> <li><code>file</code>: Captures the file name ending with <code>.cs</code>.</li> <li><code>line</code>: Captures the line number where the failure occurred.</li> </ul> </li> </ul> </li> <li>Update Stacktrace:<ul> <li>If a match is found, extracts the file name and line number.</li> <li>Appends the formatted failure information to <code>updatedStacktrace</code> using HTML  tags for line breaks.</li> </ul> </li> <li>Return Result:<ul> <li>Returns the <code>updatedStacktrace</code> string containing the formatted failure information.</li> </ul> </li> </ol> <p>Used in the <code>InitializeExceptionDetails</code> method to process the stack trace of the exception. <pre><code>StackTrace = SharedFailureContext.GetStacktraceFailedLines(stackTrace);\n</code></pre></p>"},{"location":"soft-assertion/","title":"SoftAssertion","text":"<p>This class uses <code>Assert</code> class from NUnit framework (v3.13) to perform assertions but instead of failing the test immediately, it logs the assertion failures and continues with the test execution. The assertion failures are logged in the test report.</p>"},{"location":"soft-assertion/#normal-assertion","title":"Normal Assertion","text":"<p><pre><code>Assert.AreEqual(\"Actual\", \"Expected\");\n</code></pre> This Assertion throws an exception and stops the test execution if the actual and expected values are not equal.</p>"},{"location":"soft-assertion/#assertion-using-softassert","title":"Assertion using SoftAssert","text":"<p>Pseudo-code for SoftAssert is as follows:</p> <pre><code>Assert expected and actual values\nIf assertion fails, log the failure to report and continue with the test execution\n</code></pre>"},{"location":"soft-assertion/#methods","title":"Methods","text":""},{"location":"soft-assertion/#areequal","title":"AreEqual","text":"<p>Asserts that two objects are equal. If the assertion fails, logs the failure to the report and continues with the test execution.</p> Method SignatureParametersFunctionality <pre><code>public void AreEqual&lt;T&gt;(T expected, T actual, string message = null, string nodeName = null, IWebDriver driver = null, string parentNodeName = null)\n</code></pre> Name Type Description <code>expected</code> <code>T</code> The expected value. <code>actual</code> <code>T</code> The actual value. <code>message</code> <code>string</code> The message to log to the report if the assertion passes or fails. Defaults to <code>null</code>. <code>nodeName</code> <code>string</code> The name of the node for logging substeps. Defaults to <code>null</code>. <code>driver</code> <code>IWebDriver</code> The web driver instance. Defaults to <code>_driver</code>. Used in taking screenshot within the <code>LogSubstep</code> method invocation. <code>parentNodeName</code> <code>string</code> The name of the parent node. Defaults to <code>_test</code>. Used in logging substeps. <ul> <li>Uses <code>Assert.AreEqual</code> to compare the <code>expected</code> and <code>actual</code> values.</li> <li>If the assertion fails or passes, logs the failure to the report using <code>LogSubstep</code> and adds the error to the errors list using AddErrorMessage.</li> <li>If the assertion fails, adds the error message to the list of errors along with the current stack frame (2-level deep) where the assertion has failed.</li> </ul>"},{"location":"soft-assertion/#arenotequal","title":"AreNotEqual","text":"<p>Asserts that two objects are not equal. If the assertion fails, logs the failure to the report and continues with the test execution.</p> Method SignatureParametersFunctionality <pre><code>public void AreNotEqual&lt;T&gt;(T notExpected, T actual, string message = null, string nodeName = null, IWebDriver driver = null, string parentNodeName = null)\n</code></pre> Name Type Description <code>notExpected</code> <code>T</code> The value that is not expected. <code>actual</code> <code>T</code> The actual value. <code>message</code> <code>string</code> The message to log to the report if the assertion passes or fails. Defaults to <code>null</code>. <code>nodeName</code> <code>string</code> The name of the node for logging substeps. Defaults to <code>null</code>. <code>driver</code> <code>IWebDriver</code> The web driver instance. Defaults to <code>_driver</code>. Used in taking screenshot within the <code>LogSubstep</code> method invocation. <code>parentNodeName</code> <code>string</code> The name of the parent node. Defaults to <code>_test</code>. Used in logging substeps. <ul> <li>Uses <code>Assert.AreNotEqual</code> to compare the <code>notExpected</code> and <code>actual</code> values.</li> <li>If the assertion fails or passes, logs the failure to the report using <code>LogSubstep</code> and adds the error to the errors list using AddErrorMessage.</li> <li>If the assertion fails, adds the error message to the list of errors along with the current stack frame (2-level deep) where the assertion has failed.</li> </ul>"},{"location":"soft-assertion/#contains","title":"Contains","text":"<p>Asserts that a collection contains a specified element. If the assertion fails, logs the failure to the report and continues with the test execution.</p> Method SignatureParametersFunctionality <pre><code>public void Contains&lt;T&gt;(T[] expected, T actual, string message = null, string nodeName = null, IWebDriver driver = null, string parentNodeName = null)\n</code></pre> Name Type Description <code>expected</code> <code>T[]</code> Array of expected values. <code>actual</code> <code>T</code> The actual value. <code>message</code> <code>string</code> The message to log to the report if the assertion passes or fails. Defaults to <code>null</code>. <code>nodeName</code> <code>string</code> The name of the node for logging substeps. Defaults to <code>null</code>. <code>driver</code> <code>IWebDriver</code> The web driver instance. Defaults to <code>_driver</code>. Used in taking screenshot within the <code>LogSubstep</code> method invocation. <code>parentNodeName</code> <code>string</code> The name of the parent node. Defaults to <code>_test</code>. Used in logging substeps. <ul> <li>Uses <code>Assert.Contains</code> to check if the <code>actual</code> value is present in the <code>expected</code> array.</li> <li>If the assertion fails or passes, logs the failure to the report using <code>LogSubstep</code> and adds the error to the errors list using AddErrorMessage.</li> <li>If the assertion fails, adds the error message to the list of errors along with the current stack frame (2-level deep) where the assertion has failed.</li> </ul>"},{"location":"soft-assertion/#istrue","title":"IsTrue","text":"<p>Asserts that a condition is <code>true</code>. If the assertion fails, logs the failure to the report and continues with the test execution.</p> Method SignatureParametersFunctionality <pre><code>public void IsTrue(bool condition, string message = null, string nodeName = null, IWebDriver driver = null, string parentNodeName = null)\n</code></pre> Name Type Description <code>condition</code> <code>bool</code> The condition to evaluate. <code>message</code> <code>string</code> The message to log to the report if the assertion passes or fails. Defaults to <code>null</code>. <code>nodeName</code> <code>string</code> The name of the node for logging substeps. Defaults to <code>null</code>. <code>driver</code> <code>IWebDriver</code> The web driver instance. Defaults to <code>_driver</code>. Used in taking screenshot within the <code>LogSubstep</code> method invocation. <code>parentNodeName</code> <code>string</code> The name of the parent node. Defaults to <code>_test</code>. Used in logging substeps. <ul> <li>Uses <code>Assert.IsTrue</code> to check if the <code>condition</code> is <code>true</code>.</li> <li>If the assertion fails or passes, logs the failure to the report using <code>LogSubstep</code> and adds the error to the errors list using AddErrorMessage.</li> <li>If the assertion fails, adds the error message to the list of errors along with the current stack frame (2-level deep) where the assertion has failed.</li> </ul>"},{"location":"soft-assertion/#isfalse","title":"IsFalse","text":"<p>Asserts that a condition is <code>false</code>. If the assertion fails, logs the failure to the report and continues with the test execution.</p> Method SignatureParametersFunctionality <pre><code>public void IsFalse(bool condition, string message = null, string nodeName = null, IWebDriver driver = null, string parentNodeName = null)\n</code></pre> Name Type Description <code>condition</code> <code>bool</code> The condition to evaluate. <code>message</code> <code>string</code> The message to log to the report if the assertion passes or fails. Defaults to <code>null</code>. <code>nodeName</code> <code>string</code> The name of the node for logging substeps. Defaults to <code>null</code>. <code>driver</code> <code>IWebDriver</code> The web driver instance. Defaults to <code>_driver</code>. Used in taking screenshot within the <code>LogSubstep</code> method invocation. <code>parentNodeName</code> <code>string</code> The name of the parent node. Defaults to <code>_test</code>. Used in logging substeps. <ul> <li>Uses <code>Assert.IsFalse</code> to check if the <code>condition</code> is <code>false</code>.</li> <li>If the assertion fails or passes, logs the failure to the report using <code>LogSubstep</code> and adds the error to the errors list using AddErrorMessage.</li> <li>If the assertion fails, adds the error message to the list of errors along with the current stack frame (2-level deep) where the assertion has failed.</li> </ul>"},{"location":"soft-assertion/#adderrormessage","title":"AddErrorMessage","text":"<p>Adds an error message to the list of errors in the <code>SoftAssertion</code> instance, along with the current stack frame where the error occurred.</p> Method SignatureParametersFunctionality <pre><code>public void AddErrorMessage(string assertionErrorMessage, string customMessage = null, string stackFrameFailedLine = null)\n</code></pre> Name Type Description <code>assertionErrorMessage</code> <code>string</code> The error message from the assertion. <code>customMessage</code> <code>string</code> An optional custom message to include in the error details. <code>stackFrameFailedLine</code> <code>string</code> The stack frame information of the failed line. <ul> <li>Check Custom Message:<ul> <li>If <code>customMessage</code> is not null or empty and is not already part of <code>assertionErrorMessage</code>, adds a combined message to the <code>errors</code> list in the format: <code>{customMessage} - {assertionErrorMessage} {stackFrameFailedLine}</code>.</li> </ul> </li> <li>Add Assertion Error Message:<ul> <li>If <code>customMessage</code> is null, empty, or already part of <code>assertionErrorMessage</code>, adds the message to the <code>errors</code> list in the format: <code>{assertionErrorMessage} {stackFrameFailedLine}</code>.</li> </ul> </li> </ul>"},{"location":"soft-assertion/#geterrors","title":"GetErrors","text":"<p>Returns the list of errors in the <code>SoftAssertion</code> instance.</p> Method SignatureFunctionalityUsage <pre><code>public List&lt;string&gt; GetErrors()\n</code></pre> <ul> <li>Returns the list of errors.</li> </ul> <pre><code>List&lt;string&gt; errors = assert.GetErrors();\n</code></pre>"},{"location":"soft-assertion/#getstackframefailedline","title":"GetStackFrameFailedLine","text":"<p>Returns the current stack frame information of the failed line.</p> Method SignatureFunctionalityReturnsUsage <pre><code>private string GetStackFrameFailedLine()\n</code></pre> <ul> <li>Get Stack Frame:  <ul> <li>Uses <code>new StackFrame(2, true)</code> to get the parent stack frame as the current stack frame would be in the <code>SoftAssertion</code> class.</li> <li>Uses <code>new StackFrame(3, true)</code> to get the grandparent stack frame.</li> <li>Returns the stack frame information as a string combining both the parent and grandparent stack frames.</li> </ul> </li> </ul> <ul> <li>Returns the stack frame information of the failed line.</li> </ul> <p>Used in all assertion methods to get the stack frame information of the failed line. <code>`csharp string stackFrameFailedLine = GetStackFrameFailedLine();</code></p>"},{"location":"soft-assertion/#assertall","title":"AssertAll","text":"<p>Logs all the errors in the <code>SoftAssertion</code> instance to the report and clears the errors list.</p> Method SignatureParametersFunctionality <pre><code>public void AssertAll(ExtentTest extentTest)\n</code></pre> Name Type Description <code>extentTest</code> <code>ExtentTest</code> The ExtentTest instance where the errors should be logged. <ul> <li>Set ExtentTest:<ul> <li>Assigns the provided <code>extentTest</code> to the instance variable <code>this.extentTest</code>.</li> </ul> </li> <li>Retrieve Errors:<ul> <li>Calls <code>GetErrors()</code> to retrieve the list of errors.</li> </ul> </li> <li>Check and Process Errors:<ul> <li>If there are errors, iterates through the list and constructs a single message string from all errors:<ul> <li>Adds error to the message, ensuring that errors are indexed correctly.</li> <li>If an error contains the index (formatted as ${index + 1}) ), the index is adjusted or removed accordingly.</li> </ul> </li> </ul> </li> <li>Log Errors:<ul> <li>Calls <code>LogError(extentTest, message)</code> to log the constructed error message into the ExtentTest report using markup helpers for better formatting.</li> </ul> </li> <li>Clear Errors:<ul> <li>Clears the errors list.</li> </ul> </li> </ul>"},{"location":"soft-assertion/#usage-of-assertion-methods","title":"Usage of Assertion Methods","text":"<p>An <code>assert</code> object for <code>SoftAssert</code> class is created in the <code>ReportsGenerationClass</code> which will be inherited by <code>TestExecutionHelper</code> which in-turn is inherited by all test classes and this <code>assert</code> will be used to invoke the <code>SoftAssert</code> methods.</p> AreEqualIsTrueAddErrorMessage <pre><code>public class TestClass : TestExecutionHelper\n{\n    [Test]\n    public void TestMethod()\n    {\n        assert.AreEqual(\"Actual\", \"Expected\"));\n    }\n\n    [CleanUp]\n    public void TestCleanup()\n    {\n        assert.AssertAll(GetExtentTest());\n    }\n}\n</code></pre> <pre><code>public class TestClass : TestExecutionHelper\n{\n    [Test]\n    public void TestMethod()\n    {\n        assert.IsTrue(true);\n    }\n\n    [CleanUp]\n    public void TestCleanup()\n    {\n        assert.AssertAll(GetExtentTest());\n    }\n}\n</code></pre> <pre><code>public class TestClass : TestExecutionHelper\n{\n    [Test]\n    public void TestMethod()\n    {\n        assert.AddErrorMessage(\"Error Message\", \"Custom Message\");\n    }\n\n    [CleanUp]\n    public void TestCleanup()\n    {\n        assert.AssertAll(GetExtentTest());\n    }\n}\n</code></pre>"},{"location":"system-files/","title":"Working with System Files","text":"<p>We will be working with files mainly while using file uploads/downloads or generating reports etc.,</p>"},{"location":"system-files/#file-uploads","title":"File Uploads","text":"<p>Let's say our current test requires us to upload a file called <code>sample.pdf</code> which is present in the <code>TestData/Files</code> folder. We can use the following code to upload the file:</p> UploadFileExplanation <pre><code>using System.IO;\n\npublic void UploadFile()\n{\n    var currentDirectory = Directory.GetCurrentDirectory();\n    var filePath = Path.GetFullPath(Path.Combine(currentDirectory, \"..\", \"..\", \"..\", \"TestData\", \"Files\", \"sample.pdf\"));\n    // Use the filePath to upload the file\n}\n</code></pre> <ol> <li><code>Directory.GetCurrentDirectory()</code> - This method returns the current working directory of the application.</li> <li><code>Path.GetFullPath()</code> - This method returns the absolute path of the file.</li> <li><code>Path.Combine()</code> - This method combines the specified paths into one path.</li> <li><code>..</code> - This is used to move up one directory level.</li> </ol>"},{"location":"system-files/#file-downloads","title":"File Downloads","text":"<p>Let's say our current test requires us to download a file and we don't exactly know the name of the file being downloaded. So we need to check for the number of the files before and wait for a enw file to be added to the <code>Downloads</code> directory. Assuming our <code>Downloads</code> directory is in our project directory, below is the code to download the file:</p> DownloadFileExplanation <pre><code>using System.IO;\n\npublic void DownloadFile()\n{\n    var currentDirectory = Directory.GetCurrentDirectory();\n    var downloadsDirectory = Path.GetFullPath(Path.Combine(currentDirectory, \"Downloads\"));\n    var filesCount = Directory.GetFiles(downloadsDirectory).Length;\n    // Code to download the file\n    // Wait for the file to be downloaded\n    while (Directory.GetFiles(downloadsDirectory).Length == filesCount)\n    {\n        // Wait for the file to be downloaded\n    }\n}\n</code></pre> <ol> <li><code>Directory.GetCurrentDirectory()</code> - This method returns the current working directory of the application.</li> <li><code>Path.GetFullPath()</code> - This method returns the absolute path of the file.</li> <li><code>Path.Combine()</code> - This method combines the specified paths into one path.</li> <li><code>Directory.GetFiles()</code> - This method returns the names of files in the specified directory.</li> <li><code>Length</code> - This property returns the number of elements in the array.</li> <li><code>while</code> - This loop will keep running until a new file is added to the <code>Downloads</code> directory.</li> <li><code>..</code> - This is used to move up one directory level.</li> <li>Important point to note is that using a <code>while</code> loop is not recommended in real-time scenarios as it will keep the test running until the file is downloaded. Instead, we can use a <code>Wait</code> condition to wait for the file to be downloaded.</li> </ol>"},{"location":"system-files/#generating-reports","title":"Generating Reports","text":"<p>While working with Reports we mainly use System Files while creating a report path or storing a screenshot.</p>"},{"location":"system-files/#report-path","title":"Report Path","text":"<p>Let's say we want to store the report in the <code>Reports</code> folder. We can use the following code to generate the report path:</p> ReportPathExplanation <pre><code>using System.IO;\n\npublic void ReportPath()\n{\n    var currentDirectory = Directory.GetCurrentDirectory();\n    var reportsDirectory = Path.GetFullPath(Path.Combine(currentDirectory,\"..\", \"..\", \"..\", \"Reports\"));\n    var reportPath = Path.Combine(reportsDirectory, \"report.html\");\n    // Use the reportPath to store the report\n}\n</code></pre> <ol> <li><code>Directory.GetCurrentDirectory()</code> - This method returns the current working directory of the application.</li> <li><code>Path.GetFullPath()</code> - This method returns the absolute path of the file.</li> <li><code>Path.Combine()</code> - This method combines the specified paths into one path.</li> <li><code>..</code> - This is used to move up one directory level.</li> </ol>"},{"location":"system-files/#screenshot-path","title":"Screenshot Path","text":"<p>Let's say we want to store the screenshot in the <code>Screenshots</code> folder. We can use the following code to generate the screenshot path:</p> ScreenshotPathExplanation <pre><code>using System.IO;\n\npublic void ScreenshotPath()\n{\n    var currentDirectory = Directory.GetCurrentDirectory();\n    var screenshotsDirectory = Path.GetFullPath(Path.Combine(currentDirectory, \"..\", \"..\", \"..\", \"Screenshots\"));\n    var screenshotPath = Path.Combine(screenshotsDirectory, \"screenshot.png\");\n    // Use the screenshotPath to store the screenshot\n}\n</code></pre> <ol> <li><code>Directory.GetCurrentDirectory()</code> - This method returns the current working directory of the application.</li> <li><code>Path.GetFullPath()</code> - This method returns the absolute path of the file.</li> <li><code>Path.Combine()</code> - This method combines the specified paths into one path.</li> <li><code>..</code> - This is used to move up one directory level.</li> </ol>"},{"location":"test-cases/","title":"Writing Proper Test Cases","text":""},{"location":"test-cases/#introduction","title":"Introduction","text":"<p>Writing detailed and effective manual test cases is essential for ensuring the quality and reliability of the application. This guide provides best practices and guidelines for creating comprehensive and maintainable manual test cases.</p>"},{"location":"test-cases/#best-practices","title":"Best Practices","text":"<ol> <li>Understand the Requirements<ul> <li>Review Requirements: Ensure a thorough understanding of the functional and non-functional requirements.</li> <li>Identify Test Scenarios: Determine the key scenarios that need to be tested.</li> </ul> </li> <li>Use Clear and Descriptive Titles<ul> <li>Meaningful Titles: Use clear and descriptive titles for your test cases.</li> <li>Consistent Naming Conventions: Follow a consistent naming convention for better readability.</li> </ul> </li> <li>Write Detailed Descriptions<ul> <li>Test Case Description: Provide a detailed description of what the test case is intended to validate.</li> <li>Purpose: Clearly state the purpose of the test case.</li> </ul> </li> <li>Define Pre-Conditions<ul> <li>Setup Conditions: Specify any pre-conditions that must be met before executing the test case.</li> <li>Initial State: Describe the initial state of the system before the test is executed.</li> </ul> </li> <li>Write Step-by-Step Instructions<ul> <li>Detailed Steps: Provide clear and detailed step-by-step instructions for executing the test case.</li> <li>Actions and Inputs: Include specific actions and inputs required at each step.</li> </ul> </li> <li>Specify Expected Results<ul> <li>Expected Outcome: Clearly define the expected result for each step.</li> <li>Pass/Fail Criteria: Provide criteria for determining whether the test case has passed or failed.</li> </ul> </li> <li>Include Test Data<ul> <li>Test Data: Specify any test data required for executing the test case.</li> <li>Data Variations: Include variations of data to cover different scenarios.</li> </ul> </li> <li>Use Attachments and References<ul> <li>Screenshots: Include screenshots or mockups to illustrate the steps and expected results.</li> <li>References: Provide references to related documents or specifications.</li> </ul> </li> <li>Review and Update Regularly<ul> <li>Peer Reviews: Conduct regular reviews to ensure test case quality.</li> <li>Keep Updated: Update test cases regularly to reflect any changes in requirements or functionality.</li> </ul> </li> </ol>"},{"location":"test-cases/#example-test-case","title":"Example Test Case","text":"<p>Here is an example of a well-written manual test case:</p>"},{"location":"test-cases/#test-case-title-verify-successful-user-login","title":"Test Case Title: Verify Successful User Login","text":""},{"location":"test-cases/#description","title":"Description","text":"<p>Verifies that a user can successfully log in with valid credentials.</p>"},{"location":"test-cases/#pre-conditions","title":"Pre-Conditions","text":"<ul> <li>User is on the login page.</li> <li>User has a valid username and password.</li> </ul>"},{"location":"test-cases/#test-steps","title":"Test Steps","text":"<ol> <li>Navigate to Login Page<ul> <li>Action: Open the login page URL in the browser.</li> <li>Expected Result: Login page is displayed.</li> </ul> </li> <li>Enter Username<ul> <li>Action: Enter the valid username in the username field.</li> <li>Expected Result: Username is entered correctly.</li> </ul> </li> <li>Enter Password<ul> <li>Action: Enter the valid password in the password field.</li> <li>Expected Result: Password is entered correctly.</li> </ul> </li> <li>Click Login Button<ul> <li>Action: Click the \"Login\" button.</li> <li>Expected Result: User is redirected to the dashboard page.</li> </ul> </li> <li>Verify Dashboard Page<ul> <li>Action: Check if the dashboard page is displayed.</li> <li>Expected Result: Dashboard page is displayed with the correct user information.</li> </ul> </li> </ol>"},{"location":"test-cases/#expected-results","title":"Expected Results","text":"<ul> <li>User should be successfully logged in and redirected to the dashboard page.</li> </ul>"},{"location":"test-cases/#test-data","title":"Test Data","text":"<ul> <li>Username: <code>testuser</code></li> <li>Password: <code>password123</code></li> </ul>"},{"location":"test-cases/#attachments","title":"Attachments","text":"<ul> <li>Screenshot of the login page</li> <li>Screenshot of the dashboard page after successful login</li> </ul>"},{"location":"testexecution-helper/","title":"TestExecutionHelper","text":"<p>This abstract class is used to help with the execution of tests. It inherits <code>ReportsGenerationClass</code> and in turn is inherited by all test classes. It provides a method to execute a test step and automatically log the result of the test step to both console and the report generated by <code>ReportsGenerationClass</code>.</p> <p>Below are the members of this class:</p>"},{"location":"testexecution-helper/#classes","title":"Classes","text":""},{"location":"testexecution-helper/#nodedetails","title":"NodeDetails","text":"<p>Represents the details of a node, including its name, step details, parent node name, and child relationships.</p> Class DefinitionParametersProperties <pre><code>public class NodeDetails(string nodeName, string stepDetails, string parentNodeName = null, bool hasChild = false, bool isChild = false)\n{\n    public string NodeName { get; set; } = nodeName;\n    public string StepDetails { get; set; } = stepDetails;\n    public string ParentNodeName { get; set; } = parentNodeName;\n    public bool HasChild { get; set; } = hasChild;\n    public bool IsChild { get; set; } = isChild;\n}\n</code></pre> Name Type Description <code>nodeName</code> string The name of the node. <code>stepDetails</code> string The details of the step associated with the node. <code>parentNodeName</code> string, optional The name of the parent node, if any. Default is <code>null</code>. <code>hasChild</code> bool, optional A value indicating whether the node has child nodes. Default is <code>false</code>. <code>isChild</code> bool, optional A value indicating whether the node is a child node. Default is <code>false</code>. Name Type Description <code>NodeName</code> string Gets or sets the name of the node. <code>StepDetails</code> string Gets or sets the details of the step associated with the node. <code>ParentNodeName</code> string Gets or sets the name of the parent node, if any. Default is <code>null</code>. <code>HasChild</code> bool Gets or sets a value indicating whether the node has child nodes. Default is <code>false</code>. <code>IsChild</code> bool Gets or sets a value indicating whether the node is a child node. Default is <code>false</code>."},{"location":"testexecution-helper/#usage","title":"Usage","text":"<p>The following code snippet demonstrates how to use the <code>NodeDetails</code> class:</p> Example 1Example 2 <pre><code>NodeDetails nodeDetails = new NodeDetails\n(\n    nodeName: \"Node1\",\n    stepDetails: \"Details for Step1\",\n    parentNodeName: \"ParentNode\",\n    hasChild: true,\n    isChild: false\n);\n</code></pre> <pre><code>NodeDetails nodeDetails = new NodeDetails\n(\n    nodeName: \"Node2\",\n    stepDetails: \"Details for Step2\"\n);\n</code></pre>"},{"location":"testexecution-helper/#methods","title":"Methods","text":""},{"location":"testexecution-helper/#executestep-without-dictionary","title":"ExecuteStep (without dictionary)","text":"<p>This method is used to execute a test step and log the result of the test step to both console and the report generated by <code>ReportsGenerationClass</code>.</p> Method SignatureParametersFunctionality <pre><code>public void ExecuteStep(Action stepAction, string stepName, string stepDetails)\n</code></pre> Name Type Description <code>stepAction</code> Action The action to be executed in the test step. <code>stepName</code> string The name of the test step to be executed and logged to the report. <code>stepDetails</code> string The details of the test step to be logged to the current node in the report. <ol> <li>Log Step Start:<ul> <li>Logs the start of the step using <code>LogSubstep</code>.</li> <li>Retrieves the current time in the \"India Standard Time\" timezone and logs the start time with the step name and details.</li> </ul> </li> <li>Execute Action:<ul> <li>Executes the <code>stepAction</code> delegate.</li> </ul> </li> <li>Log Step Completion:<ul> <li>If <code>stepDetails</code> is empty, assigns a default completion message.</li> <li>Logs the completion of the step using <code>LogSubstep</code>.</li> <li>Retrieves the current time in the \"India Standard Time\" timezone and logs the end time with the step name and details.</li> </ul> </li> <li>Exception Handling:<ul> <li>Catches any exceptions thrown during the execution of the <code>stepAction</code>.</li> <li>Initializes exception details using <code>InitializeExceptionDetails</code>.</li> <li>Logs the failure of the step using <code>LogSubstep</code> with <code>Status.Fail</code>.</li> <li>Captures network calls using <code>GetNetworkCalls</code>.</li> <li>Resets substeps using <code>ResetSubsteps</code>.</li> <li>Rethrows the exception using <code>ExceptionDispatchInfo.Capture(ex).Throw()</code>.</li> </ul> </li> </ol>"},{"location":"testexecution-helper/#usage_1","title":"Usage","text":"<p>Say <code>MyClass.MyMethod()</code> is the action to be executed in the test step. The following code snippet demonstrates how to use the <code>ExecuteStep</code> method:</p> Example <pre><code>ExecuteStep(() =&gt; MyClass.MyMethod(),\n            stepName: \"MyMethod\",\n            stepDetails: \"Demonstrates the usage of ExecuteStep method.\");\n</code></pre>"},{"location":"testexecution-helper/#executestep","title":"ExecuteStep","text":"<p>This method is used to execute a test step and log the result of the test step to both console and the report generated by <code>ReportsGenerationClass</code>. An overload to the previous method taking a dictionary of string and <code>NodeDetails</code> parameter to log subsequent steps as skipped after a test fails before completion.</p> Method SignatureParametersFunctionality <pre><code>public void ExecuteStep(Action stepAction, string stepKey, Dictionary&lt;string, NodeDetails&gt; stepInfo)\n</code></pre> Name Type Description <code>stepAction</code> Action The action to be executed in the test step. <code>stepKey</code> string The key to be used to log the test step in the report. <code>stepInfo</code> Dictionary The dictionary of all steps to be logged in the report. <ol> <li>Retrieve Step Information:<ul> <li>Attempts to retrieve <code>NodeDetails</code> for the given <code>stepKey</code> from the <code>stepInfo</code> dictionary.</li> <li>Throws a <code>KeyNotFoundException</code> if the <code>stepKey</code> is not found.</li> </ul> </li> <li>Extract Step Details:<ul> <li>Extracts <code>stepName</code>, <code>stepDetails</code>, <code>parentStepName</code>, <code>hasChild</code>, and <code>isChild</code> from the retrieved <code>NodeDetails</code>.</li> <li>Determines the <code>currentNodeName</code> based on whether the step is a child.</li> </ul> </li> <li>Log Step Start:<ul> <li>Logs the start of the step using <code>LogSubstep</code>.</li> <li>Retrieves the current time in the \"India Standard Time\" timezone and logs the start time with the step name and details.</li> </ul> </li> <li>Execute Action:<ul> <li>Executes the <code>stepAction</code> delegate.</li> </ul> </li> <li>Log Step Completion:<ul> <li>If <code>stepDetails</code> is empty, assigns a default completion message.</li> <li>Logs the completion of the step using <code>LogSubstep</code>.</li> <li>Removes the completed step from the <code>stepInfo</code> dictionary using <code>RemoveStep</code>.</li> <li>Retrieves the current time in the \"India Standard Time\" timezone and logs the end time with the step name and details.</li> </ul> </li> <li>Exception Handling:<ul> <li>Catches any exceptions thrown during the execution of the <code>stepAction</code>.</li> <li>Initializes exception details using <code>InitializeExceptionDetails</code>.</li> <li>Logs the failure of the step using <code>LogSubstep</code> with <code>Status.Fail</code>.</li> <li>Removes the failed step from the <code>stepInfo</code> dictionary using <code>RemoveStep</code>.</li> <li>Logs the skipping of remaining steps using LogSubstep with <code>Status.Skip</code>.</li> <li>Captures network calls using <code>GetNetworkCalls</code>.</li> <li>Resets substeps using <code>ResetSubsteps</code>.</li> <li>Rethrows the exception using <code>ExceptionDispatchInfo.Capture(ex).Throw()</code>.</li> </ul> </li> </ol>"},{"location":"testexecution-helper/#usage_2","title":"Usage","text":"<p>Say MyClass.MyMethod() is the action to be executed in the test step. The following code snippet demonstrates how to use the <code>ExecuteStep</code> method:</p> Example <pre><code>Dictionary&lt;string, NodeDetails&gt; stepInfo = new Dictionary&lt;string, NodeDetails&gt;\n{\n    { \"Step1\", new NodeDetails { NodeName = \"Step1\", StepDetails = \"Details for Step1\" } },\n    { \"Step2\", new NodeDetails { NodeName = \"Step2\", StepDetails = \"Details for Step2\" } }\n};\n\nExecuteStep(() =&gt; MyClass.MyMethod(),\n            stepKey: \"Step1\",\n            stepInfo: stepInfo);\n</code></pre>"},{"location":"testexecution-helper/#executestepandsuppress","title":"ExecuteStepAndSuppress","text":"<p>This method is used to execute a test step and log the result of the test step to both console and the report generated by <code>ReportsGenerationClass</code>. It suppresses the exception thrown during the execution of the test step and continues with the execution of the subsequent steps.</p> Method SignatureParametersFunctionality <pre><code>public void ExecuteStepAndSuppress(Action stepAction, string stepName, string stepDetails = null)\n</code></pre> Name Type Description <code>stepAction</code> Action The action to be executed in the test step. <code>stepName</code> string The name of the test step to be executed and logged to the report. <code>stepDetails</code> string The details of the test step to be logged to the current node in the report. Default is <code>null</code>. <ol> <li>Log Step Start:<ul> <li>Logs the start of the step using <code>LogSubstep</code>.</li> <li>Retrieves the current time in the \"India Standard Time\" timezone and logs the start time with the step name and details.</li> </ul> </li> <li>Execute Action:<ul> <li>Executes the <code>stepAction</code> delegate.</li> </ul> </li> <li>Log Step Completion:<ul> <li>If <code>stepDetails</code> is empty, logs a default completion message using <code>LogSubstep</code>.</li> <li>Otherwise, logs the provided <code>stepDetails</code> using <code>LogSubstep</code>.</li> </ul> </li> <li>Exception Handling (Suppression):<ul> <li>Catches any exceptions thrown during the execution of the <code>stepAction</code>.</li> <li>Captures network calls using <code>GetNetworkCalls</code> with <code>stepName</code>.</li> <li>Initializes exception details using <code>InitializeExceptionDetails</code>.</li> <li>Logs the failure of the step using LogSubstep with <code>Status.Skip</code>.</li> <li>Logs detailed failure information, including the failed method name, exception message, and stack trace, using <code>LogSubstep</code> with <code>Status.Skip</code>.</li> <li>Resets exception details using <code>ResetExceptionDetails</code>.</li> </ul> </li> <li>Log Step End:<ul> <li>Retrieves the current time in the \"India Standard Time\" timezone and logs the end time with the step name and details.</li> </ul> </li> </ol>"},{"location":"testexecution-helper/#usage_3","title":"Usage","text":"<p>Say MyClass.MyMethod() is the action to be executed in the test step. The following code snippet demonstrates how to use the <code>ExecuteStepAndSuppress</code> method:</p> Example <pre><code>ExecuteStepAndSuppress(() =&gt; MyClass.MyMethod(),\n                        stepName: \"MyMethod\",\n                        stepDetails: \"Demonstrates the usage of ExecuteStepAndSuppress method.\");\n</code></pre>"},{"location":"testexecution-helper/#removestep","title":"RemoveStep","text":"<p>This method is used to remove a step from the dictionary of steps to be logged in the report.</p> Method SignatureParametersFunctionality <pre><code>public void RemoveStep(string stepKey, Dictionary&lt;string, NodeDetails&gt; stepInfo)\n</code></pre> Name Type Description <code>stepKey</code> string The key of the step to be removed from the dictionary of steps to be logged in the report. <code>stepInfo</code> Dictionary The dictionary of all steps to be logged in the report. <ol> <li>Find Step to Remove:<ul> <li>Retrieves the step to remove from the <code>stepInfo</code> dictionary based on the provided <code>stepKey</code>.</li> <li>Uses <code>FirstOrDefault</code> to find the matching key-value pair.</li> </ul> </li> <li>Remove Step if No Children:<ul> <li>If the step to remove is found and it has no children (<code>HasChild</code> is false), it removes the step from the <code>stepInfo</code> dictionary.</li> </ul> </li> <li>Check for Orphaned Parent:<ul> <li>Counts the number of sibling steps for the parent node of the step being removed.</li> <li>If there are no sibling steps and the step being removed is a child (<code>IsChild</code> is true), it attempts to remove the parent step from the <code>stepInfo</code> dictionary.</li> </ul> </li> </ol>"},{"location":"testexecution-helper/#usage_4","title":"Usage","text":"<p>The following code snippet demonstrates how to use the <code>RemoveStep</code> method:</p> Example <pre><code>Dictionary&lt;string, NodeDetails&gt; stepInfo = new Dictionary&lt;string, NodeDetails&gt;\n{\n    { \"step1\", new NodeDetails { NodeName = \"Step1\", StepDetails = \"Detail1\", ParentNodeName = null, HasChild = true, IsChild = false } },\n    { \"step2\", new NodeDetails { NodeName = \"Step2\", StepDetails = \"Detail2\", ParentNodeName = \"Step1\", HasChild = false, IsChild = true } },\n    // Add more steps as needed\n};\n\nRemoveStep(\"step2\", stepInfo);\n</code></pre>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>If you have any questions or issues, please contact us at automationteam@onblick.com.</p>"},{"location":"troubleshooting/#reporting-issues","title":"Reporting Issues","text":"<p>To help us resolve your issue quickly, please include the following information when reporting:</p> <ul> <li>Description: A clear and concise description of the problem.</li> <li>Steps to Reproduce: Step-by-step instructions to reproduce the issue.</li> <li>Expected Behavior: What you expected to happen.</li> <li>Actual Behavior: What actually happened.</li> <li>Screenshots/Logs: Any relevant screenshots or log files.</li> </ul>"},{"location":"troubleshooting/#contact-information","title":"Contact Information","text":"<ul> <li>Project related Issues: Please open an issue on this repository.</li> <li>General Questions/Issues: Contact us at qateam@onblick.com.</li> </ul>"},{"location":"troubleshooting/#faqs","title":"FAQs","text":"<ul> <li> <p>What is the purpose of this project?</p> <ul> <li>The purpose of this project is to automate the testing of the OnBlick application.</li> </ul> </li> <li> <p>What is the technology stack used in this project?</p> <ul> <li>This project uses Selenium WebDriver, C#, NUnit, Page Object Model, and Extent Reports.</li> </ul> </li> <li> <p>How do I run the tests?</p> <ul> <li>Please refer to the Running Tests section.</li> </ul> </li> <li> <p>How do I view the test results?</p> <ul> <li>Please refer to the Viewing Test Results section.</li> </ul> </li> <li> <p>How do I generate test reports?</p> <ul> <li>Please refer to the Generating Test Reports section.</li> </ul> </li> <li> <p>How do I write my own tests?</p> <ul> <li>Please refer to the Writing Tests section.</li> </ul> </li> <li> <p>How do I push my changes to the repository?</p> <ul> <li>Please refer to the Git Workflow section.</li> </ul> </li> <li> <p>How do I debug failing tests?</p> <ul> <li>Please refer to the Debugging Tests section.</li> </ul> </li> </ul>"},{"location":"urls/","title":"URLs","text":"<p>The <code>URLs</code> class is a singleton utility that constructs and provides access to various URLs used in the application under test. The URLs are derived from environment-specific configurations and endpoint definitions stored in JSON files. This class dynamically resolves base URLs based on the current environment and appends the appropriate endpoints.</p>"},{"location":"urls/#class-definition","title":"Class Definition","text":"URLs.cs <pre><code>public class URLs\n</code></pre>"},{"location":"urls/#properties","title":"Properties","text":"InstanceGetUrlLogin_URL <p><code>Instance</code>: Provides access to the singleton instance of the URLs class. <pre><code>public static URLs Instance =&gt; _instance.Value;\n</code></pre></p> <p><code>GetUrl(string domain, string endpointName)</code>: Constructs a complete URL by combining the specified domain with an endpoint from the configuration. ```csharp</p> <p><code>Login_URL</code>: URL for the login page. <pre><code>public string Login_URL =&gt; GetUrl(_mainDomain, nameof(Login_URL));\n</code></pre> Note: Other URL properties follow a similar pattern.</p>"},{"location":"urls/#json-configuration","title":"JSON Configuration","text":"<p>The URLs are derived from two JSON files:     - <code>endpoints-config.json</code>: Contains endpoint definitions for different environments.     - <code>env-config.json</code>: Contains environment-specific configurations.</p> Example <code>endpoints-config.json</code>Example <code>env-config.json</code> <pre><code>{\n    \"Timesheets_URL\": \"/app/employer-timesheets\",\n    \"Workforce_URL\": \"/app/workforce-new\"\n    // Additional endpoints as needed\n}\n</code></pre> <pre><code>{\n    \"demo\": {\n        \"main\": &lt;demo-base-url&gt;,\n        \"hr\": &lt;hr-base-url&gt;,\n        \"ess\": &lt;ess-base-url&gt;\n    },\n    \"prod\": {\n        \"main\": &lt;prod-base-url&gt;,\n        //other similar properties as needed\n    },\n    \"dev\": {\n        \"main\": &lt;dev-base-url&gt;,\n        //other similar properties as needed\n    }\n    //other environments as needed\n}\n</code></pre>"},{"location":"urls/#usage","title":"Usage","text":"<p>To access URLs defined in the <code>URLs</code> class, use the singleton <code>Instance</code> to retrieve the desired URL property. The URL is constructed dynamically based on the current environment and the endpoint specified.</p> Accessing Login URLAccessing Workforce URL <pre><code>var loginUrl = URLs.Instance.Login_URL;\n</code></pre> <pre><code>var workforceUrl = URLs.Instance.Workforce_URL;\n</code></pre>"},{"location":"urls/#notes","title":"Notes","text":"<ul> <li>The <code>env-config.json</code> file should define URLs for different environments such as <code>demo</code>, <code>prod</code>, etc.</li> <li>The <code>endpoints-config.json</code> file should include all necessary endpoint paths used throughout the application.</li> </ul>"},{"location":"vs-shortcuts/","title":"Must know Shortcuts","text":""},{"location":"vs-shortcuts/#visual-studio","title":"Visual Studio","text":"<p>Refer to the below image for the most general Visual Studio 2022 shortcuts.</p> <p></p>"},{"location":"vs-shortcuts/#visual-studio-code","title":"Visual Studio Code","text":"<p>Refer to the below image for the most general Visual Studio Code shortcuts. </p> <p></p> <p>Note that all the above shortcuts are general IDE shortcuts and can be customized as per your preference in settings.</p>"},{"location":"wait-helpers/","title":"WaitHelpers","text":"<p>The <code>WaitHelpers</code> class provides various methods for waiting for certain conditions using Selenium WebDriver.</p>"},{"location":"wait-helpers/#methods","title":"Methods","text":""},{"location":"wait-helpers/#waitforelementtobevisible","title":"WaitForElementToBeVisible","text":"<p>Waits for an element to be visible on the page.</p> Method SignatureParameters <pre><code>public static void WaitForElementToBeVisible(IWebDriver driver, By element, int time = 60)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance to use to search for the element. <code>element</code> By The locator for the element to wait for. <code>time</code> int The maximum time to wait for the element to be visible. Default is 60 seconds."},{"location":"wait-helpers/#usage","title":"Usage","text":"With timeout specifiedWithout timeout specified <pre><code>WaitForElementToBeVisible(driver, By.Id(\"elementId\"), 10);\n</code></pre> <pre><code>WaitForElementToBeVisible(driver, By.Id(\"elementId\")); //defaults to 60 seconds\n</code></pre>"},{"location":"wait-helpers/#waitforinvisibilityofelement","title":"WaitForInvisibilityOfElement","text":"<p>Waits for an element to be invisible on the page.</p> Method SignatureParameters <pre><code>public static void WaitForInvisibilityOfElement(IWebDriver driver, By element, int time = 60)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance to use to search for the element. <code>element</code> By The locator for the element to wait for. <code>time</code> int The maximum time to wait for the element to be invisible. Default is 60 seconds."},{"location":"wait-helpers/#usage_1","title":"Usage","text":"With timeout specifiedWithout timeout specified <pre><code>WaitForInvisibilityOfElement(driver, By.Id(\"elementId\"), 10);\n</code></pre> <pre><code>WaitForInvisibilityOfElement(driver, By.Id(\"elementId\")); //defaults to 60 seconds\n</code></pre> <p>Note:This method will be removed in a future version, use WaitForInvisibilityOfElements instead</p>"},{"location":"wait-helpers/#waitforelementtobeclickable","title":"WaitForElementToBeClickable","text":"<p>Waits for an element to be clickable (checks if element is enabled) on the page.</p> Method SignatureParameters <pre><code>public static void WaitForElementToBeClickable(IWebDriver driver, By element, int time = 60)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance to use to search for the element. <code>element</code> By The locator for the element to wait for. <code>time</code> int The maximum time to wait for the element to be clickable. Default is 60 seconds."},{"location":"wait-helpers/#usage_2","title":"Usage","text":"With timeout specifiedWithout timeout specified <pre><code>WaitForElementToBeClickable(driver, By.Id(\"elementId\"), 10);\n</code></pre> <pre><code>WaitForElementToBeClickable(driver, By.Id(\"elementId\")); //defaults to 60 seconds\n</code></pre>"},{"location":"wait-helpers/#waitforelementtoexist","title":"WaitForElementToExist","text":"<p>Waits for an element to exist on the page.</p> Method SignatureParameters <pre><code>public static void WaitForElementToExist(IWebDriver driver, By element, int time = 60)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance to use to search for the element. <code>element</code> By The locator for the element to wait for. <code>time</code> int The maximum time to wait for the element to exist. Default is 60 seconds."},{"location":"wait-helpers/#usage_3","title":"Usage","text":"With timeout specifiedWithout timeout specified <pre><code>WaitForElementToExist(driver, By.Id(\"elementId\"), 10);\n</code></pre> <pre><code>WaitForElementToExist(driver, By.Id(\"elementId\")); //defaults to 60 seconds\n</code></pre>"},{"location":"wait-helpers/#waitforinvisibilityofelements","title":"WaitForInvisibilityOfElements","text":"<p>Waits for all elements matching the locator to be invisible on the page.</p> Method SignatureParameters <pre><code>public static void WaitForInvisibilityOfElements(IWebDriver driver, By element, int t = 80)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance to use to search for the element. <code>element</code> By The locator for the elements to wait for. <code>t</code> int The maximum time to wait for the elements to be invisible. Default is 80 seconds."},{"location":"wait-helpers/#usage_4","title":"Usage","text":"With timeout specifiedWithout timeout specified <pre><code>WaitForInvisibilityOfElements(driver, By.ClassName(\"elementClass\"), 10);\n</code></pre> <pre><code>WaitForInvisibilityOfElements(driver, By.ClassName(\"elementClass\")); //defaults to 80 seconds\n</code></pre>"},{"location":"wait-helpers/#waitforurltocontain","title":"WaitForUrlToContain","text":"<p>Waits for the URL to contain the specified string.</p> Method SignatureParameters <pre><code>public static void WaitForUrlToContain(IWebDriver driver, string url, int time = 60)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance to use to search for the element. <code>url</code> string The string to wait for in the URL. <code>time</code> int The maximum time to wait for the URL to contain the string. Default is 60 seconds."},{"location":"wait-helpers/#usage_5","title":"Usage","text":"With timeout specifiedWithout timeout specified <pre><code>WaitForUrlToContain(driver, \"example.com\", 10);\n</code></pre> <pre><code>WaitForUrlToContain(driver, \"example.com\"); //defaults to 60 seconds\n</code></pre>"},{"location":"wait-helpers/#waitfornewtab","title":"WaitForNewTab","text":"<p>Waits for a new tab to be opened.</p> Method SignatureParameters <pre><code>public static void WaitForNewTab(IWebDriver driver, int tabCount, int time = 60)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance to use to search for the element. <code>tabCount</code> int Initial number of tabs before performing an action that presumably opens a new tab. <code>time</code> int The maximum time to wait for a new tab to be opened. Default is 60 seconds."},{"location":"wait-helpers/#usage_6","title":"Usage","text":"With timeout specifiedWithout timeout specified <pre><code>WaitForNewTab(driver, 1, 10);\n</code></pre> <pre><code>WaitForNewTab(driver, 1); //defaults to 60 seconds\n</code></pre>"},{"location":"wait-helpers/#waitfortabclose","title":"WaitForTabClose","text":"<p>Waits for a tab to be closed.</p> Method SignatureParameters <pre><code>public static void WaitForTabClose(IWebDriver driver, int tabCount, int time = 60)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance to use to search for the element. <code>tabCount</code> int Initial number of tabs before performing an action that presumably closes a tab. <code>time</code> int The maximum time to wait for a tab to be closed. Default is 60 seconds."},{"location":"wait-helpers/#usage_7","title":"Usage","text":"With timeout specifiedWithout timeout specified <pre><code>WaitForTabClose(driver, 2, 10);\n</code></pre> <pre><code>WaitForTabClose(driver, 2); //defaults to 60 seconds\n</code></pre>"},{"location":"wait-helpers/#waitforfiledownload","title":"WaitForFileDownload","text":"<p>Waits for a file to be downloaded.</p> Method SignatureParameters <pre><code>public static void WaitForFileDownload(IWebDriver driver, string downloadPath, int initialFileCount, int time = 60)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance to use to search for the element. <code>downloadPath</code> string The path where the file is expected to be downloaded. <code>initialFileCount</code> int Initial number of files in the download path before performing an action that presumably downloads a file. <code>time</code> int The maximum time to wait for a file to be downloaded. Default is 60 seconds."},{"location":"wait-helpers/#usage_8","title":"Usage","text":"With timeout specifiedWithout timeout specified <pre><code>WaitForFileDownload(driver, \"C:\\\\Downloads\", 0, 10);\n</code></pre> <pre><code>WaitForFileDownload(driver, \"C:\\\\Downloads\", 0); //defaults to 60 seconds\n</code></pre>"},{"location":"wait-helpers/#waitforanyelementtobevisible","title":"WaitForAnyElementToBeVisible","text":"<p>Waits for any elements identified with the given locator to be visible on the page. Note: Used only when there are multiple matching elements with the given locator, and we have to wait for an element whose index isn't 1 to be visible.</p> Method SignatureParameters <pre><code>public static void WaitForAnyElementToBeVisible(IWebDriver driver, By element, int time = 60)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance to use to search for the element. <code>element</code> By The locator for the element to wait for. <code>time</code> int The maximum time to wait for the element to be visible. Default is 60 seconds."},{"location":"wait-helpers/#usage_9","title":"Usage","text":"With timeout specifiedWithout timeout specified <pre><code>WaitForAnyElementToBeVisible(driver, By.ClassName(\"elementClass\"), 10);\n</code></pre> <pre><code>WaitForAnyElementToBeVisible(driver, By.ClassName(\"elementClass\")); //defaults to 60 seconds\n</code></pre>"},{"location":"wait-helpers/#waitfornopendingrequests","title":"WaitForNoPendingRequests","text":"<p>Waits for all pending network requests to complete.</p> Method SignatureParameters <pre><code>public static void WaitForNoPendingRequests(IWebDriver driver, int time)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance to use to search for the element. <code>time</code> int The maximum time to wait for all pending network requests to complete."},{"location":"wait-helpers/#usage_10","title":"Usage","text":"Example <pre><code>WaitForNoPendingRequests(driver, 60);\n</code></pre> <p>Note: This method doesn't work in Onblick2.0 as there are always pending signalr calls, so it is unused for now.</p>"},{"location":"webdriver-extensions/","title":"WebDriverExtensions","text":"<p>WebDriverExtensions is a collection of extensions for Selenium WebDriver. It provides a set of useful methods and classes to work with WebDriver.</p>"},{"location":"webdriver-extensions/#methods","title":"Methods","text":""},{"location":"webdriver-extensions/#opennewtab","title":"OpenNewTab","text":"<p>The <code>OpenNewTab</code> method is an extension method that opens a new tab.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static void OpenNewTab(this IWebDriver driver)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance. <ol> <li>JavaScript Execution: Executes a JavaScript script to open a new tab.</li> <li>New Tab: Opens a new tab in the browser.</li> </ol> <pre><code>driver.OpenNewTab();\n</code></pre>"},{"location":"webdriver-extensions/#uploadfile","title":"UploadFile","text":"<p>The <code>UploadFile</code> method is an extension method that uploads a file to a file input element.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static void UploadFile(this IWebDriver driver, string filePath)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance. <code>filePath</code> string The path to the file to upload. <ol> <li>Find Element: Finds the file input element on the page.</li> <li>Send Keys: Sends the file path to the file input element.</li> </ol> <pre><code>driver.UploadFile(\"C:\\\\path\\\\to\\\\file.txt\");\n</code></pre>"},{"location":"webdriver-extensions/#getusername","title":"GetUserName","text":"<p>The <code>GetUserName</code> method is an extension method that retrieves the username of the current user.</p> Method SignatureParamtersFunctionalityUsage <pre><code>public static string GetUserName(this IWebDriver driver)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance. <ol> <li>Username: Retrieves the username of the current user from the top right section of the page.</li> </ol> <p>To Get the username of the currently logged in user. <pre><code>string userName = driver.GetUserName();\n</code></pre></p>"},{"location":"webdriver-extensions/#getdesignation","title":"GetDesignation","text":"<p>The <code>GetDesignation</code> method is an extension method that retrieves the designation of the current user.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static string GetDesignation(this IWebDriver driver)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance. <ol> <li>Designation: Retrieves the designation of the current user from the top right part of the page.</li> </ol> <p>To Get the designation of the currently logged in user. <pre><code>string designation = driver.GetDesignation();\n</code></pre></p>"},{"location":"webdriver-extensions/#getcurrentrole","title":"GetCurrentRole","text":"<p>The <code>GetCurrentRole</code> method is an extension method that retrieves the current role of the user.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static string GetCurrentRole(this IWebDriver driver)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance. <ol> <li>Role: Retrieves the current role of the user from the top right part of the page.</li> </ol> <p>To Get the current role of the user. <pre><code>string role = driver.GetCurrentRole();\n</code></pre></p>"},{"location":"webdriver-extensions/#getorgname","title":"GetOrgName","text":"<p>The <code>GetOrgName</code> method is an extension method that retrieves the organization name of the user.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static string GetOrgName(this IWebDriver driver)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance. <ol> <li>Organization Name: Retrieves the organization name of the user from the top left part of the page.</li> </ol> <p>To Get the organization name of the user. <pre><code>string orgName = driver.GetOrgName();\n</code></pre></p>"},{"location":"webdriver-extensions/#getcandidateprofilename","title":"GetCandidateProfileName","text":"<p>The <code>GetCandidateProfileName</code> method is an extension method that retrieves the candidate profile name.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static string GetCandidateProfileName(this IWebDriver driver)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance. <ol> <li>Candidate Profile Name: Retrieves the candidate profile name.</li> </ol> <p>To Get the candidate's name from the candidate profile. <pre><code>string candidateProfileName = driver.GetCandidateProfileName();\n</code></pre></p>"},{"location":"webdriver-extensions/#setzoomlevel","title":"SetZoomLevel","text":"<p>The <code>SetZoomLevel</code> method is an extension method that sets the zoom level of the browser.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static void SetZoomLevel(this IWebDriver driver, int zoomPercent)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance. <code>zoomPercent</code> int The zoom level percentage. <ol> <li>JavaScript Execution: Executes a JavaScript script to set the zoom level.</li> <li>Zoom Level: Sets the zoom level of the browser to the specified percentage.</li> <li>Zoom In/Out: Increases or decreases the zoom level.</li> </ol> <pre><code>driver.SetZoomLevel(150);\n</code></pre> <p>Note: Refrain from using this method for now as it's still a bit undeveloped.</p>"},{"location":"webdriver-extensions/#clickbyoffsetfromviewport","title":"ClickByOffSetFromViewport","text":"<p>The <code>ClickByOffSetFromViewport</code> method is an extension method that clicks on the webpage by providing the offset from the viewport.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static void ClickByOffSetFromViewport(this IWebDriver driver, Point point)\n</code></pre> Name Type Description <code>driver</code> IWebDriver The WebDriver instance. <code>point</code> Point The offset from the viewport. <ol> <li>JavaScript Execution: Executes a JavaScript script to click on the webpage.</li> <li>Offset: Clicks on the webpage at the specified offset from the viewport.</li> </ol> <pre><code>driver.ClickByOffSetFromViewport(new Point(100, 100));\n</code></pre> <p>Note: Refrain from using this method for now as it's still a bit undeveloped.</p>"},{"location":"webelement-extensions/","title":"WebElementExtensions","text":"<p><code>WebElementExtensions</code> is a collection of extension methods for Selenium's IWebElement interface. It is designed to make it easier to work with Selenium's IWebElement interface by providing a set of extension methods that make it easier to interact with elements on a page.</p>"},{"location":"webelement-extensions/#methods","title":"Methods","text":"<p>There are some private methods (italicized headings) used in the extension methods and all the public methods are extension methods available in <code>WebElementExtensions</code>:</p>"},{"location":"webelement-extensions/#private-methods","title":"Private Methods","text":""},{"location":"webelement-extensions/#getdriverfromelement","title":"GetDriverFromElement","text":"<p>The <code>GetDriverFromElement</code> method is a private method used in almost all the methods in this class to get the WebDriver instance from an IWebElement object.</p> Method SignatureParametersReturn Value <pre><code>private static IWebDriver GetDriverFromElement(this IWebElement element)\n</code></pre> Name Type Description <code>element</code> IWebElement The element to get the driver from. <p>The method returns the WebDriver instance associated with the element.</p>"},{"location":"webelement-extensions/#getinterceptingelement","title":"GetInterceptingElement","text":"<p><code>GetInterceptingElement</code> is a private method used in <code>IClick</code> which extracts the identifier of the element that is intercepting the click from an exception message.</p> Method SignatureParametersReturn Value <pre><code>private static string GetInterceptingElement(Exception ex)\n</code></pre> Name Type Description <code>ex</code> Exception The exception thrown when the click is intercepted. <p>The method returns the identifier of the element that is intercepting the click.</p>"},{"location":"webelement-extensions/#moveinterceptingelement","title":"MoveInterceptingElement","text":"<p>The <code>MoveInterceptingElement</code> method is an extension method that moves an intercepting element out of the way. It is used in the <code>IClick</code> method to move draggable elements that are obstructing the click.</p> Method SignatureParameters <pre><code>private static void MoveInterceptingElement(this IWebElement interceptingElement, IWebDriver driver)\n</code></pre> Name Type Description <code>interceptingElement</code> IWebElement The element that is obstructing the click."},{"location":"webelement-extensions/#iclick","title":"IClick","text":"<p>The <code>IClick</code> method is an extension method that clicks on an element. It is equivalent to calling the <code>Click</code> method on an IWebElement object. <code>IClick</code> - Interception Click handler that manages intercepted exceptions.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static void IClick(this IWebElement element)\n</code></pre> Name Type Description <code>element</code> IWebElement The element to click on. <ol> <li>Retries: The method attempts to click the element up to 5 times (<code>maxRetries</code>), incrementing the retry count with each attempt.</li> <li>Exception Handling:<ul> <li>Catches <code>ElementClickInterceptedException</code> when the click is obstructed.</li> <li>Identifies the intercepting element using GetInterceptingElement and takes specific actions based on its type:<ul> <li>Modal Frames: Switches to the modal frame and clicks the close button.</li> <li>IFrames: Clicks the close button for the iframe.</li> <li>Overlay Elements: Clicks on an overlay close button.</li> <li>Draggable Elements: Moves the intercepting element out of the way using MoveInterceptingElement, retrying if necessary.</li> <li>Scrollable Elements: Scrolls the calendar or similar elements to the left.</li> </ul> </li> </ul> </li> <li>Error Handling: If the maximum number of retries is exceeded, the exception is re-thrown to be handled elsewhere.</li> <li>Scroll Handling: Ensures the element is in view before attempting the click by scrolling to it if necessary.</li> </ol> <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.IClick();\n</code></pre>"},{"location":"webelement-extensions/#scrolltotheleft","title":"ScrollToTheLeft","text":"<p>The <code>ScrollToTheLeft</code> method is used to scroll to the leftmost of the page within the scrollable element on the webpage.</p> Method SignatureParametersUsage <pre><code>public static void ScrollToTheLeft(this IWebElement element, IWebDriver driver)\n</code></pre> Name Type Description <code>element</code> IWebElement The element to scroll. <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.ScrollToTheLeft();\n</code></pre>"},{"location":"webelement-extensions/#scrolltotheright","title":"ScrollToTheRight","text":"<p>The <code>ScrollToTheRight</code> method is used to scroll to the rightmost of the page within the scrollable element on the webpage.</p> Method SignatureParametersUsage <pre><code>public static void ScrollToTheRight(this IWebElement element)\n</code></pre> Name Type Description <code>element</code> IWebElement The element to scroll. <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.ScrollToTheRight();\n</code></pre>"},{"location":"webelement-extensions/#igethexcolor","title":"IGetHexColor","text":"<p>The <code>IGetHexColor</code> method is an extension method that retrieves the hex color of the element. It is equivalent to calling the <code>GetCssValue</code> method on an IWebElement object. It has two overload methods, one that returns the hex color as a string and another that validates the hex color with an expected value.</p> Method Signature 1Method Signature 2ParametersFunctionalityUsage 1Usage 2 <pre><code>public static string IGetHexColor(this IWebElement element, string colorLocator)\n</code></pre> <pre><code>public static void IGetHexColor(this IWebElement element, string colorLocator, string expectedHex)\n</code></pre> <p><code>expectedHex</code> is only in the second method signature.</p> Name Type Description <code>element</code> IWebElement The element to get the color from. <code>colorLocator</code> string The CSS locator for the color. <code>expectedHex</code> string The expected hex color value. <ol> <li>Get Color: Retrieves the color of the element using the CSS locator.</li> <li>Hex Conversion: Converts the color to a hex value.</li> <li>Validation: Compares the hex value with the expected hex value if provided.</li> </ol> <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nstring hexColor = element.IGetHexColor(\"color\");\n</code></pre> <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.IGetHexColor(\"color\", \"#000000\");\n</code></pre>"},{"location":"webelement-extensions/#highlight","title":"Highlight","text":"<p>The <code>Highlight</code> method is an extension method that highlights an element on the page. It is used to visually identify the element on the page.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static void Highlight(this IWebElement element)\n</code></pre> Name Type Description <code>element</code> IWebElement The element to highlight. <ol> <li>JavaScript Execution: Executes a JavaScript script to highlight the element.</li> <li>Styling: Applies a red border around the element to highlight it.</li> </ol> <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.Highlight();\n</code></pre>"},{"location":"webelement-extensions/#unhighlight","title":"Unhighlight","text":"<p>The <code>Unhighlight</code> method is an extension method that removes the highlight from an element on the page. It is used to remove the visual identification of the element.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static void Unhighlight(this IWebElement element)\n</code></pre> Name Type Description <code>element</code> IWebElement The element to unhighlight. <ol> <li>JavaScript Execution: Executes a JavaScript script to remove the highlight from the element.</li> <li>Styling: Removes the red border around the element.</li> </ol> <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.Unhighlight();\n</code></pre>"},{"location":"webelement-extensions/#scrollto","title":"ScrollTo","text":"<p>The <code>ScrollTo</code> method is an extension method that scrolls to an element on the page. It is used to bring the element into view.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static void ScrollTo(this IWebElement element)\n</code></pre> Name Type Description <code>element</code> IWebElement The element to scroll to. <ol> <li>JavaScript Execution: Executes a JavaScript script to scroll to the element.</li> <li>Scrolling: Scrolls the page to bring the element into view.</li> </ol> <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.ScrollTo();\n</code></pre>"},{"location":"webelement-extensions/#scroll","title":"Scroll","text":"<p>The <code>Scroll</code> method is an extension method that scrolls the page by a specified number of pixels. It is used to scroll the page up or down by a specific amount.</p> Method SignatureParametersFunctionalityUsageExample 2 <pre><code>public static void Scroll(this IWebElement element, string direction, int distance)\n</code></pre> Name Type Description <code>element</code> IWebElement The element to scroll. <code>direction</code> string The direction to scroll in (<code>up</code> or <code>down</code>). <code>distance</code> int The number of pixels to scroll by. <ol> <li>JavaScript Execution: Executes a JavaScript script to scroll the page.</li> <li>Scrolling: Scrolls the page up or down by the specified number of pixels.</li> <li>Direction: Determines the direction of the scroll based on the input parameter.</li> </ol> <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.Scroll(\"down\", 500);\n</code></pre> <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.Scroll(\"up\", 500);\n</code></pre>"},{"location":"webelement-extensions/#dateentry","title":"DateEntry","text":"<p>The <code>DateEntry</code> method is an extension method that enters a date into a date picker element. It is used to automate the entry of dates into date picker elements.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static void DateEntry(this IWebElement element, string date)\n</code></pre> Name Type Description <code>element</code> IWebElement The date picker element. <code>date</code> string The date to enter in the format <code>MM/dd/yyyy</code>. <ol> <li>JavaScript Execution: Executes a JavaScript script to enter the date into the date picker.</li> <li>Date Entry: Enters the date into the date picker element.</li> <li>Date Format: The date should be in the format <code>MM/dd/yyyy</code>.</li> </ol> <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.DateEntry(\"12/31/2022\");\n</code></pre>"},{"location":"webelement-extensions/#clearandenter","title":"ClearAndEnter","text":"<p>The <code>ClearAndEnter</code> method is an extension method that clears the existing text in an input field and enters new text. It is used to automate the clearing and entering of text into input fields.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static void ClearAndEnter(this IWebElement element, string text)\n</code></pre> Name Type Description <code>element</code> IWebElement The input field element. <code>text</code> string The text to enter into the input field. <ol> <li>Clearing: Clears the existing text in the input field.</li> <li>Entering: Enters the new text into the input field.</li> </ol> <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.ClearAndEnter(\"Text to enter\");\n</code></pre>"},{"location":"webelement-extensions/#clickleft","title":"ClickLeft","text":"<p>The <code>ClickLeft</code> method is an extension method that clicks on the left side of an element. It is used to simulate a click on the left side of an element.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static void ClickLeft(this IWebElement element, int percentage)\n</code></pre> Name Type Description <code>element</code> IWebElement The element to click on. <code>percentage</code> int The percentage of the element's width to click on. <ol> <li>Actions: Creates an Actions object to perform the click action.</li> <li>Click Location: Simulates a click on the left side of the element.</li> <li>Percentage: Determines the location of the click based on the percentage of the element's width.</li> </ol> <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.ClickLeft(20);\n</code></pre>"},{"location":"webelement-extensions/#hover","title":"Hover","text":"<p>The <code>Hover</code> method is an extension method that hovers over an element. It is used to simulate a mouse hover action on an element.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static void Hover(this IWebElement element)\n</code></pre> Name Type Description <code>element</code> IWebElement The element to hover over. <ol> <li>Actions: Creates an Actions object to perform the hover action.</li> <li>Hovering: Hovers over the element.</li> </ol> <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.Hover();\n</code></pre>"},{"location":"webelement-extensions/#ctrlclick","title":"CtrlClick","text":"<p>The <code>CtrlClick</code> method is an extension method that performs a Ctrl+Click action on an element. It is used to simulate a Ctrl+Click action on an element which opens the hyperlink of an element in a new tab.</p> Method SignatureParametersFunctionalityUsage <pre><code>public static void CtrlClick(this IWebElement element)\n</code></pre> Name Type Description <code>element</code> IWebElement The element to Ctrl+Click on. <ol> <li>Actions: Creates an Actions object to perform the Ctrl+Click action.</li> <li>Ctrl+Click: Performs the Ctrl+Click action on the element.</li> <li>New Tab: Opens the hyperlink of the element in a new tab.</li> </ol> <pre><code>IWebElement element = driver.FindElement(By.Id(\"elementId\"));\nelement.CtrlClick();\n</code></pre>"},{"location":"workforce-page/","title":"WorkforcePage","text":"<p>The <code>WorkforcePage</code> class contains all the enums, locators and methods necessary to interact with the Workforce page of the application. The Workforce page is used to manage the workforce of an organization, including adding, editing, and deleting employees.</p>"},{"location":"workforce-page/#members","title":"Members","text":""},{"location":"workforce-page/#enums","title":"Enums","text":"<p>The <code>WorkforcePage</code> class contains the following enums:</p>"},{"location":"workforce-page/#employeetype","title":"EmployeeType","text":"<p>The <code>EmployeeType</code> enumeration represents different states or categories of an employee within the system. This enum is used to classify and manage employees based on their current employment status.</p> Enum MembersUsage Member Description <code>Active</code> Represents an active employee. <code>NewHire</code> Represents a new hire employee. <code>Terminated</code> Represents a terminated employee. <p>This enum is used in multiple worforce methods to classify employees based on their current status.</p> <pre><code>EmployeeType employeeType1 = EmployeeType.Active;\nEmployeeType employeeType2 = EmployeeType.NewHire;\nEmployeeType employeeType3 = EmployeeType.Terminated;\n</code></pre>"},{"location":"workforce-page/#locators","title":"Locators","text":"<p>The locators used in the <code>WorkforcePage</code> class aren't disclosed here, you can go through the <code>WorkforcePage.cs</code> file in the project to view the locators. All locator members are of two types <code>By</code> and <code>IWebElement</code>(using <code>PageObjectFactory</code>).</p>"},{"location":"workforce-page/#methods","title":"Methods","text":"<p>The <code>WorkforcePage</code> class contains several methods that are used to interact with the Workforce page. Some of the methods are private and some are public, italicized methods are private methods.</p>"},{"location":"workforce-page/#searchemployee","title":"SearchEmployee","text":"<p>The <code>SearchEmployee</code> method searches for an employee in the workforce based on their email and first name. It navigates to the appropriate workforce URL depending on the employee's status (<code>Active</code>, <code>NewHire</code>, or <code>Terminated</code>) and performs a search. If the employee is not found and the status is <code>Active</code>, it will attempt to search under <code>NewHire</code> status as well.</p> Method SignatureParametersFunctionalityExample Usage <pre><code>public void SearchEmployee(string empMail, string empFirstName, EmployeeType? employeeType = null, string nodeName = null)\n</code></pre> Name Type Description <code>empMail</code> <code>string</code> The email address of the employee to search for. <code>empFirstName</code> <code>string</code> The first name of the employee to search for. <code>employeeType</code> <code>EmployeeType?</code> The type of employee to search for (<code>Active</code>, <code>NewHire</code>, or <code>Terminated</code>). <code>nodeName</code> <code>string</code> The name of the node to be shown in the report. <ol> <li>Navigate to the appropriate workforce URL based on the employee's status.</li> <li>Enter the email address of the employee in the search fields.</li> <li>Click the search button to find the employee.</li> <li>Wait until the employee is found with <code>empFirstName</code>.</li> <li>If the employee is not found and the status is <code>Active</code>, attempt to search under <code>NewHire</code> status as well.</li> </ol> <pre><code>WorkforcePage workforcePage = new WorkforcePage();\nworkforcePage.SearchEmployee(\"john.doe@example.com\", \"John\", EmployeeType.NewHire, \"Search Workforce\");\n</code></pre>"},{"location":"workforce-page/#searchemployee_1","title":"SearchEmployee","text":"<p>The <code>SearchEmployee</code> method searches for an employee in the workforce based on their email. It navigates to the appropriate workforce URL depending on the employee's status (<code>Active</code>, <code>NewHire</code>, or <code>Terminated</code>) and performs a search. This method is only for [<code>TryDeleteEmployee</code>], DO NOT use it anywhere else, as it's functionality will also be changed soon.</p> Method SignatureParametersFunctionalityExample Usage <pre><code>public void SearchEmployee(string empMail, EmployeeType? employeeType = null, string nodeName = null)\n</code></pre> Name Type Description <code>empMail</code> <code>string</code> The email address of the employee to search for. <code>employeeType</code> <code>EmployeeType?</code> The type of employee to search for (<code>Active</code>, <code>NewHire</code>, or <code>Terminated</code>). <code>nodeName</code> <code>string</code> The name of the node to be shown in the report. <ol> <li>Navigate to the appropriate workforce URL based on the employee's status.</li> <li>Enter the email address of the employee in the search fields.</li> <li>Click the search button to find the employee.</li> </ol> <pre><code>WorkforcePage workforcePage = new WorkforcePage();\nworkforcePage.SearchEmployee(\"john.doe@example.com\", EmployeeType.NewHire, \"Search Employee\");\n</code></pre>"},{"location":"workforce-page/#gotoemployeeprofile","title":"GoToEmployeeProfile","text":"<p>The <code>GotoEmployeeProfile</code> method navigates to an employee's profile based on the provided <code>OnboardDetails</code>. It handles navigation through various conditions, including checking if the profile name matches, handling pop-ups, and searching for the employee. This method uses <code>GetCandidateProfileName</code> and <code>SearchEmployee</code> methods internally.</p> Method SignatureParametersFunctionalityExample Usage <pre><code>public void GotoEmployeeProfile(OnboardDetails onboardDetails, EmployeeType? empType = null, string nodeName = null)\n</code></pre> Name Type Description <code>onboardDetails</code> <code>OnboardDetails</code> The details of the employee to navigate to. <code>empType</code> <code>EmployeeType?</code> The type of employee to search for (<code>Active</code>, <code>NewHire</code>, or <code>Terminated</code>). <code>nodeName</code> <code>string</code> The name of the node to be shown in the report. <ol> <li>Retrieve Candidate Profile Name: Retrieves the candidate profile name from the current page.</li> <li>Check Profile Name: Checks if the retrieved profile name contains the first and last name from onboardDetails.</li> <li>Navigate to Profile:<ul> <li>If the profile name is null or doesn't match, it navigates to the profile through a pop-up which comes after onboarding or by searching for the employee.</li> </ul> </li> <li>Log Navigation: Logs the navigation to the employee profile to the report.</li> </ol> <pre><code>WorkforcePage workforcePage = new WorkforcePage();\nworkforcePage.GotoEmployeeProfile(onboardDetails, EmployeeType.Active, \"Navigate to Profile\");\n</code></pre>"},{"location":"workforce-page/#delete","title":"Delete","text":"<p>The <code>Delete</code> method handles the deletion of records based on the provided <code>EmployeeType</code> and locator. It performs different actions depending on whether the employee is <code>Active</code>/<code>NewHire</code> or <code>Terminated</code>. This method is an internal method used in <code>DeleteEmployee</code> and <code>DeleteEmployees</code> methods.</p> Method SignatureParametersFunctionalityUsage <pre><code>private void Delete(EmployeeType employeeType, By Locator)\n</code></pre> Name Type Description <code>employeeType</code> <code>EmployeeType</code> The type of employee to delete (<code>Active</code>, <code>NewHire</code>, or <code>Terminated</code>). <code>Locator</code> <code>By</code> The locator to identify the delete button for the employee. <ol> <li>Click on the delete button based on the provided locator.</li> <li>Handle the deletion process based on the employee type (<code>Active</code>/<code>NewHire</code> or <code>Terminated</code>).</li> </ol> <p>This method is used internally in the <code>DeleteEmployee</code> and <code>DeleteEmployees</code> methods. This method is only intended for those 2 methods, DO NOT use it anywhere else.</p>"},{"location":"workforce-page/#deleteemployee","title":"DeleteEmployee","text":"<p>The <code>DeleteEmployee</code> method searches for an employee by email and first name and then deletes the employee record. It handles different actions based on the <code>EmployeeType</code>. This method uses the <code>SearchEmployee</code>, <code>Delete</code>, and <code>DeleteI9</code> methods internally.</p> Method SignatureParametersFunctionalityExample Usage <pre><code>public void DeleteEmployee(string empMail, string empFirstName, EmployeeType? employeeType = null, string nodeName = null)\n</code></pre> Name Type Description <code>empMail</code> <code>string</code> The email address of the employee to delete. <code>empFirstName</code> <code>string</code> The first name of the employee to delete. <code>employeeType</code> <code>EmployeeType?</code> The type of employee to delete (<code>Active</code>, <code>NewHire</code>, or <code>Terminated</code>). <code>nodeName</code> <code>string</code> The name of the node to be shown in the report. <ol> <li>Determine Employee Type: If employeeType is not specified, it defaults to Active.</li> <li>Set Locators: Based on the employeeType, set the appropriate locators for employee actions and delete buttons.</li> <li>Search Employee: Use the SearchEmployee method to find the employee by email and first name.</li> <li>Delete Employee: Iterate through the located elements and delete the employee. Handle possible popups and exceptions.<ul> <li>One possibility for exception is where there's an I-9 for the current candidate, in which case delete directly isn't possible. So, I-9 is first deleted with <code>DeleteI9</code> method and then the candidate is deleted.</li> <li>Another possiblity for exception is where the candidate has reporting candidates, in which case there's a confirmation popup to unlink the reporting candidates before deletion.</li> </ul> </li> </ol> <p>This method should be the go to method to delete an employee. It handles all the necessary steps to delete an employee.</p> <pre><code>WorkforcePage workforcePage = new WorkforcePage();\nworkforcePage.DeleteEmployee(\"john.doe@example.com\", \"John\", EmployeeType.Terminated, \"Delete\");\n</code></pre>"},{"location":"workforce-page/#deleteemployees","title":"DeleteEmployees","text":"<p>The DeleteEmployees method searches for multiple employee records by email and first name and deletes them. It handles different actions based on the EmployeeType. This method is designed for and used only in <code>TryDeleteEmployee</code> method, DO NOT use it anywhere else. This method uses the <code>Delete</code> and <code>DeleteI9</code> methods internally.</p> Method SignatureParametersFunctionalityUsage <pre><code>public void DeleteEmployees(string empMail, string empFirstName, EmployeeType? employeeType = null, string nodeName = null)\n</code></pre> Name Type Description <code>empMail</code> <code>string</code> The email address of the employee to delete. <code>empFirstName</code> <code>string</code> The first name of the employee to delete. <code>employeeType</code> <code>EmployeeType?</code> The type of employee to delete (<code>Active</code>, <code>NewHire</code>, or <code>Terminated</code>). <code>nodeName</code> <code>string</code> The name of the node to be shown in the report. <ol> <li>Determine Employee Type: If employeeType is not specified, it defaults to Active.</li> <li>Set Locators: Based on the employeeType, set the appropriate locators for employee actions and delete buttons.</li> <li>Locate and Delete Employees: Find all elements matching the locator and delete each employee, handling possible popups and exceptions.</li> </ol> <p>This method is used internally in the <code>TryDeleteEmployee</code> method. It is not intended for use outside of this context.</p>"},{"location":"workforce-page/#trydeleteemployee","title":"TryDeleteEmployee","text":"<p>The <code>TryDeleteEmployee</code> method attempts to delete an employee by email and first name from various employee categories. It first attempts to delete the employee from the <code>Terminated</code> category and then proceeds to check and delete the employee from the <code>Active</code> and <code>NewHire</code> categories if they exist. Exception handling ensures that any issues encountered during the deletion process are appropriately managed.</p> Method SignatureParametersFunctionalityExample Usage <pre><code>public void TryDeleteEmployee(string empMail, string empFirstName, string nodeName = null)\n</code></pre> Name Type Description <code>empMail</code> <code>string</code> The email address of the employee to delete. <code>empFirstName</code> <code>string</code> The first name of the employee to delete. <code>nodeName</code> <code>string</code> The name of the node to be shown in the report. <ol> <li>Search and Delete from <code>Terminated</code>: Search for the employee in the Terminated category and delete if found.</li> <li>Search and Delete from <code>Active</code> and <code>NewHire</code>: Search and delete the employee from the Active and NewHire categories if found. Handle exceptions that may occur during this process.</li> <li>Only Tries to Delete from any category if the candidate already exists and if not, handles any exceptions that may occur.</li> </ol> <p>This method is useful when you are onboarding a candidate and want to ensure that any existing records are deleted before proceeding.</p> <pre><code>WorkforcePage workforcePage = new WorkforcePage(driver);\nworkforcePage.TryDeleteEmployee(\"john.doe@example.com\", \"John\", \"Node1\");\n</code></pre>"},{"location":"workforce-page/#deletei9","title":"DeleteI9","text":"<p>The <code>DeleteI9</code> method is used to delete an I-9 form for an employee specified by their first name. This method handles the navigation to the I-9 tab within the employee's profile and performs the necessary steps to delete the I-9 form, including handling any warnings and verifying element visibility and clickability.</p> Method SignatureParametersFunctionalityUsage <pre><code>public void DeleteI9(string empFirstName, string nodeName = null)\n</code></pre> Name Type Description <code>empFirstName</code> <code>string</code> The first name of the employee whose I-9 form is to be deleted. <code>nodeName</code> <code>string</code> The name of the node to be shown in the report. <ol> <li>Navigate to the I-9 tab within the employee's profile.</li> <li>Click the delete button to remove the I-9 form.</li> <li>Handle any warnings or confirmations that may appear during the deletion process.</li> </ol> <p>This method is designed for and used in only the <code>DeleteEmployee</code> method. It should not be used outside of this context.</p>"},{"location":"workforce-page/#enableess","title":"EnableESS","text":"<p>The <code>EnableEss</code> method is used to enable the Employee Self-Service (ESS) feature. It waits for the ESS slider button to be visible, checks its current state, and enables it if it is not already enabled. The method then logs the action and validates that ESS is indeed enabled.</p> Method SignatureParametersFunctionalityUsage <pre><code>public void EnableEss(string nodeName = null)\n</code></pre> Name Type Description <code>nodeName</code> <code>string</code> The name of the node to be shown in the report. <ol> <li>Wait for the ESS slider button to be visible.</li> <li>Check the current state of the ESS slider.</li> <li>If the ESS slider is not enabled, click it to enable ESS.</li> <li>Log the action to the report and validate that ESS is enabled.</li> </ol> <p>This method is used to enable the Employee Self-Service feature in the application, assuming we're already on the candidate profile. If not use <code>GoToEmployeeProfile</code> first and then <code>EnableESS</code>.</p> <p><code>`csharp WorkforcePage workforcePage = new WorkforcePage(); workforcePage.EnableEss(\"Enable ESS\");</code></p>"},{"location":"workforce-page/#disableess","title":"DisableESS","text":"<p>The <code>DisableEss</code> method is used to disable the Employee Self-Service (ESS) feature. It waits for the ESS slider button to be visible, checks its current state, and disables it if it is not already disabled. The method then logs the action and validates that ESS is indeed disabled.</p> Method SignatureParametersFunctionalityUsage <pre><code>public void DisableEss(string nodeName = null)\n</code></pre> Name Type Description <code>nodeName</code> <code>string</code> The name of the node to be shown in the report. <ol> <li>Wait for the ESS slider button to be visible.</li> <li>Check the current state of the ESS slider.</li> <li>If the ESS slider is enabled, click it to disable ESS.</li> <li>Log the action to the report and validate that ESS is disabled.</li> </ol> <p>This method is used to disable the Employee Self-Service feature in the application, assuming we're already on the candidate profile. If not use <code>GoToEmployeeProfile</code> first and then <code>DisableESS</code>.</p> <pre><code>WorkforcePage workforcePage = new WorkforcePage();\nworkforcePage.DisableEss(\"Disable ESS\");\n</code></pre>"},{"location":"workforce-page/#gettextfromcolumn","title":"GetTextFromColumn","text":"<p>The <code>GetTextFromColumn</code> method retrieves the text content of the first cell in a specified column of an HTML table, based on the header text provided. It identifies the column index using the header text, then extracts the text from the corresponding cell. This method is used in <code>ValidateCandidateDetails</code> method</p> Method SignatureParametersReturnsFunctionalityUsage <pre><code>public string GetTextFromColumn(string headerText)\n</code></pre> Name Type Description <code>headerText</code> <code>string</code> The text of the column header to identify the column. <ul> <li>The text content of the first cell in the specified column.</li> </ul> <ol> <li>Identify the column index based on the provided header text.</li> <li>Retrieve the text content of the first cell in the identified column.</li> </ol> <p>This method is used internally in the <code>ValidateCandidateDetails</code> method to extract specific details from the candidate profile.</p>"},{"location":"workforce-page/#validatecandidatedetails","title":"ValidateCandidateDetails","text":"<p>The <code>ValidateCandidateDetails</code>method verifies that the details of a candidate displayed in the application match the expected values provided in the <code>OnboardDetails</code> object. It performs this validation by comparing the displayed values in the UI with the values stored in the <code>OnboardDetails</code> object and logs any discrepancies.</p> Method SignatureParametersFunctionalityUsage <pre><code>public void ValidateCandidateDetails(OnboardDetails onboardDetails, string nodeName = null)\n</code></pre> Name Type Description <code>onboardDetails</code> <code>OnboardDetails</code> The expected details of the candidate to validate. <code>nodeName</code> <code>string</code> The name of the node to be shown in the report. <ol> <li>Retrieve Column Text:<ul> <li>Calls GetTextFromColumn for each column header to retrieve the corresponding text value from the table.</li> </ul> </li> <li>Validate and Assert Values:<ul> <li>Compares each retrieved value with the expected value from onboardDetails and logs the validation result.</li> </ul> </li> <li>Special Case Handling:<ul> <li>Handles specific cases for gender and tax terms, applying different validation rules as necessary.</li> </ul> </li> </ol> <p>This method is used to validate the details of a candidate after a successful <code>BulkOnboard</code> operation.</p> <pre><code>WorkforcePage workforcePage = new WorkforcePage();\nworkforcePage.ValidateCandidateDetails(onboardDetails, \"Validate Candidate Details\");\n</code></pre>"},{"location":"workforce-page/#managerole","title":"ManageRole","text":"<p>The <code>ManageRole</code> method is designed to search for an employee using their email and first name, then access and manage the employee's role through the application's user interface. It involves searching for the employee, clicking on the \"Actions\" button associated with them, and then selecting the \"Manage Role\" option.</p> Method SignatureParametersFunctionalityUsage <pre><code>public void ManageRole(string empMail, string empFirstName, string nodeName = null)\n</code></pre> Name Type Description <code>empMail</code> <code>string</code> The email address of the employee to manage the role for. <code>empFirstName</code> <code>string</code> The first name of the employee to manage the role for. <code>nodeName</code> <code>string</code> The name of the node to be shown in the report. <ol> <li>Search for the employee using their email and first name.</li> <li>Click on the \"Actions\" button associated with the employee.</li> <li>Select the \"Manage Role\" option from the dropdown menu.</li> </ol> <p>This method is used in the <code>ManageSupervision</code> method to manage the role of an employee.</p> <pre><code>WorkforcePage workforcePage = new WorkforcePage();\nworkforcePage.ManageRole(\"john.doe@example.com\", \"John\", \"Manage Employee Role\");\n</code></pre>"},{"location":"workforce-page/#addcandidatetosupervisor","title":"AddCandidateToSupervisor","text":"<p>The <code>AddCandidateToSupervisor</code> method adds a candidate to either the supervisor's list of reporting employees or assigned trainees based on the <code>isTrainee</code> flag. It handles the UI interactions required to input the candidate's full name, select them from a search result, and verify that the selection has been made.</p> Method SignatureParametersFunctionalityUsage <pre><code>private void AddCandidateToSupervisor(string candidateFullName, bool isTrainee)\n</code></pre> Name Type Description <code>candidateFullName</code> <code>string</code> The full name of the candidate to add. <code>isTrainee</code> <code>bool</code> A flag indicating whether the candidate is a trainee. <ol> <li>Define Locators:<ul> <li>Creates By locators for the search result and selection choice elements.</li> </ul> </li> <li>Determine Input Field:<ul> <li>Based on the isTrainee flag, selects the appropriate input field and sends the candidate's full name.</li> </ul> </li> <li>Select Candidate from Search Result:<ul> <li>Waits for the search result element to become visible and clicks it.</li> </ul> </li> <li>Verify Selection:<ul> <li>Waits for the selection choice element to become visible to confirm that the candidate has been added.</li> </ul> </li> </ol> <p>This method is used internally in the <code>ManageSupervision</code> method to add candidates to a supervisor's list of reporting employees or assigned trainees.</p>"},{"location":"workforce-page/#addsupervisorinreportingto","title":"AddSupervisorInReportingTo","text":"<p>The <code>AddSupervisorInReportingTo</code> method assigns a supervisor to the \"Reporting To\" field by searching for their full name and selecting them from the search results. It ensures the input field and selection are visible and interactable. This method is used in the <code>ManageSupervision</code> method.</p> Method SignatureParametersFunctionalityUsage <pre><code>private void AddSupervisorInReportingTo(string supervisorFullName)\n</code></pre> Name Type Description <code>supervisorFullName</code> <code>string</code> The full name of the supervisor to assign. <ol> <li>Define Locators:<ul> <li>Creates By locators for the search result and selection choice elements based on the supervisor's full name.</li> </ul> </li> <li>Click Reporting To Input Field:<ul> <li>Waits for the \"Reporting To\" input field to be visible and clicks it.</li> </ul> </li> <li>Enter Supervisor's Name:<ul> <li>Waits for the text box within the \"Reporting To\" field to be visible and sends the supervisor's full name.</li> </ul> </li> <li>Select Supervisor from Search Result:<ul> <li>Waits for the search result element to become visible and clicks it to select the supervisor.</li> </ul> </li> <li>Verify Selection:<ul> <li>Waits for the selection choice element to become visible to confirm that the supervisor has been successfully added.</li> </ul> </li> </ol> <p>This method is used internally in the <code>ManageSupervision</code> method to assign a supervisor to the \"Reporting To\" field.</p>"},{"location":"workforce-page/#clickellipsisunderbanner","title":"ClickEllipsisUnderBanner","text":"<p>The <code>ClickEllipsisUnderBanner</code> method attempts to click an ellipsis (three-dot menu) element located under a banner. If the click action is intercepted (typically because of a banner overlay), the method will first collapse the banner and then retry clicking the ellipsis.</p> Method SignatureFunctionalityUsage <pre><code>public void ClickEllipsisUnderBanner()\n</code></pre> <ol> <li>Click Ellipsis:<ul> <li>Attempts to click the ellipsis element located under a banner.</li> </ul> </li> <li>Handle Banner Overlay:<ul> <li>If the click action is intercepted by a banner overlay, the method will first collapse the banner and then retry clicking the ellipsis.</li> </ul> </li> </ol> <p>This method is used to interact with elements located under a banner that may be obscured by the banner itself. It is used in the <code>ManageSupervision</code> method.</p> <pre><code>WorkforcePage workforcePage = new WorkforcePage(driver);\nworkforcePage.ClickEllipsisUnderBanner();\n</code></pre>"},{"location":"workforce-page/#managesupervision","title":"ManageSupervision","text":"<p>The <code>ManageSupervision</code> method is used to manage the supervision details for a candidate and their supervisor. It performs actions based on the current URL and the profile details of the candidate and supervisor.</p> Method SignatureParametersFunctionalityExample Usage <pre><code>public void ManageSupervision(OnboardDetails candidateDetails, OnboardDetails supervisorDetails)\n</code></pre> Name Type Description <code>candidateDetails</code> <code>OnboardDetails</code> The details of the candidate to manage supervision for. <code>supervisorDetails</code> <code>OnboardDetails</code> The details of the supervisor to manage supervision for. <ol> <li>Check Current URL:<ul> <li>If the URL contains \"/app/profile\", it assumes the user is on a profile page.</li> </ul> </li> <li>Manage Supervision on Profile Page:<ul> <li>Click the ellipsis menu if visible.</li> <li>Wait for and click the \"Manage Role\" button.</li> <li>Check if the current profile matches the candidate's name:<ul> <li>If yes, add the supervisor to the candidate.</li> <li>If the current profile matches the supervisor's name:<ul> <li>Add the candidate as a subordinate to the supervisor.</li> </ul> </li> </ul> </li> </ul> </li> <li>Manage Supervision in Other Scenarios:<ul> <li>If not on the profile page, manage roles directly.</li> <li>Add the candidate to the supervisor's list.</li> </ul> </li> <li>Save Changes:<ul> <li>Wait for the \"Save\" button to be clickable and then click it to save the changes.</li> </ul> </li> </ol> <pre><code>WorkforcePage workforcePage = new WorkforcePage(driver\nworkforcePage.ManageSupervision(candidateDetails, supervisorDetails);\n</code></pre>"}]}